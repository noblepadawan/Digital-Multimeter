
digital multimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013128  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ff0  08016ff0  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08016ff0  08016ff0  00026ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ff8  08016ff8  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ff8  08016ff8  00026ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016ffc  08016ffc  00026ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08017000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  20000078  08017074  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010bc  08017074  000310bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e505  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002110  00000000  00000000  0003e5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  000406c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  00040da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002500c  00000000  00000000  00041398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ef0  00000000  00000000  000663a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e329a  00000000  00000000  0006f294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0015252e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b9c  00000000  00000000  001525f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002f41  00000000  00000000  00154190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003eb0 	.word	0x08003eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08003eb0 	.word	0x08003eb0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_ldivmod>:
 8000ae0:	b97b      	cbnz	r3, 8000b02 <__aeabi_ldivmod+0x22>
 8000ae2:	b972      	cbnz	r2, 8000b02 <__aeabi_ldivmod+0x22>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bfbe      	ittt	lt
 8000ae8:	2000      	movlt	r0, #0
 8000aea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aee:	e006      	blt.n	8000afe <__aeabi_ldivmod+0x1e>
 8000af0:	bf08      	it	eq
 8000af2:	2800      	cmpeq	r0, #0
 8000af4:	bf1c      	itt	ne
 8000af6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000afa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000afe:	f000 b9c7 	b.w	8000e90 <__aeabi_idiv0>
 8000b02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	db09      	blt.n	8000b22 <__aeabi_ldivmod+0x42>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db1a      	blt.n	8000b48 <__aeabi_ldivmod+0x68>
 8000b12:	f000 f855 	bl	8000bc0 <__udivmoddi4>
 8000b16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1e:	b004      	add	sp, #16
 8000b20:	4770      	bx	lr
 8000b22:	4240      	negs	r0, r0
 8000b24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db1b      	blt.n	8000b64 <__aeabi_ldivmod+0x84>
 8000b2c:	f000 f848 	bl	8000bc0 <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	4252      	negs	r2, r2
 8000b42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b46:	4770      	bx	lr
 8000b48:	4252      	negs	r2, r2
 8000b4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4e:	f000 f837 	bl	8000bc0 <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4240      	negs	r0, r0
 8000b5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b62:	4770      	bx	lr
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	f000 f829 	bl	8000bc0 <__udivmoddi4>
 8000b6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b76:	b004      	add	sp, #16
 8000b78:	4252      	negs	r2, r2
 8000b7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_f2ulz>:
 8000b80:	b5d0      	push	{r4, r6, r7, lr}
 8000b82:	f7ff fc85 	bl	8000490 <__aeabi_f2d>
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__aeabi_f2ulz+0x38>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4606      	mov	r6, r0
 8000b8c:	460f      	mov	r7, r1
 8000b8e:	f7ff fcd7 	bl	8000540 <__aeabi_dmul>
 8000b92:	f7ff ff85 	bl	8000aa0 <__aeabi_d2uiz>
 8000b96:	4604      	mov	r4, r0
 8000b98:	f7ff fc58 	bl	800044c <__aeabi_ui2d>
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <__aeabi_f2ulz+0x3c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f7ff fcce 	bl	8000540 <__aeabi_dmul>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4630      	mov	r0, r6
 8000baa:	4639      	mov	r1, r7
 8000bac:	f7ff fb10 	bl	80001d0 <__aeabi_dsub>
 8000bb0:	f7ff ff76 	bl	8000aa0 <__aeabi_d2uiz>
 8000bb4:	4621      	mov	r1, r4
 8000bb6:	bdd0      	pop	{r4, r6, r7, pc}
 8000bb8:	3df00000 	.word	0x3df00000
 8000bbc:	41f00000 	.word	0x41f00000

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <ADC_init>:
 */

#include "adc.h"

void ADC_init()
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
	// Configure PA0 for ADC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000e9a:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <ADC_init+0x13c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <ADC_init+0x13c>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER &= ~(GPIO_MODER_MODE0);
 8000ea6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eb0:	f023 0303 	bic.w	r3, r3, #3
 8000eb4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE0);
 8000eb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ec0:	f043 0303 	orr.w	r3, r3, #3
 8000ec4:	6013      	str	r3, [r2, #0]
	GPIOA->ASCR |= (GPIO_ASCR_ASC0);		// connect PA0 analog switch to ADC input
 8000ec6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

	//enable ADC Clock
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <ADC_init+0x13c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <ADC_init+0x13c>)
 8000edc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
	// ADC will run at same speed as CPU
	ADC123_COMMON->CCR = (1 << ADC_CCR_CKMODE_Pos);
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <ADC_init+0x140>)
 8000ee4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee8:	609a      	str	r2, [r3, #8]

	//power up ADC and turn on voltage regulator
	ADC1->CR &= ~(ADC_CR_DEEPPWD);
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <ADC_init+0x144>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <ADC_init+0x144>)
 8000ef0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ef4:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN);
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <ADC_init+0x144>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4a37      	ldr	r2, [pc, #220]	; (8000fd8 <ADC_init+0x144>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6093      	str	r3, [r2, #8]
	for (uint32_t i = 0; i < 640; i++); 	// wait 20 microseconds for regulator to power up
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	e002      	b.n	8000f0e <ADC_init+0x7a>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000f14:	d3f8      	bcc.n	8000f08 <ADC_init+0x74>
											// 4 Mhz -> 80
											// 32 MHZ -> 640
											// 80 Mhz -> 1600
	//calibrate ADC
	//ensure ADC is not enabled, single ended calibration
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <ADC_init+0x144>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <ADC_init+0x144>)
 8000f1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADCAL);				// start calibration
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <ADC_init+0x144>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <ADC_init+0x144>)
 8000f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f30:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & ADC_CR_ADCAL);			// wait for calibration to finish
 8000f32:	bf00      	nop
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <ADC_init+0x144>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dbfb      	blt.n	8000f34 <ADC_init+0xa0>

	//configure single ended mode for channel 5 before enabling ADC
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <ADC_init+0x144>)
 8000f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <ADC_init+0x144>)
 8000f44:	f023 0320 	bic.w	r3, r3, #32
 8000f48:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	//enable ADC
	ADC1->ISR |= (ADC_ISR_ADRDY);			// clear ready flag with a 1
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <ADC_init+0x144>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <ADC_init+0x144>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]
	ADC1->CR |= (ADC_CR_ADEN); 				// enable ADC
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <ADC_init+0x144>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <ADC_init+0x144>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY));	// wait for ADC ready flag
 8000f64:	bf00      	nop
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <ADC_init+0x144>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f9      	beq.n	8000f66 <ADC_init+0xd2>
	ADC1->ISR |= (ADC_ISR_ADRDY);			// clear ready flag with a 1
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <ADC_init+0x144>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <ADC_init+0x144>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6013      	str	r3, [r2, #0]

	//configure ADC
	//set sequence to 1 conversion on channel 5
	ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos);
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <ADC_init+0x144>)
 8000f80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30

	//configure sampling time of 2.5 clock cycles for channel 5
	ADC1->SMPR1 &= ~(ADC_SMPR1_SMP5);
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <ADC_init+0x144>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <ADC_init+0x144>)
 8000f8c:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8000f90:	6153      	str	r3, [r2, #20]

	//ADC configuration 12-bit software trigger
	// right align
	ADC1->CFGR = 0;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <ADC_init+0x144>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]

	// start conversion
	ADC1->CR |= (ADC_CR_ADSTART);
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <ADC_init+0x144>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <ADC_init+0x144>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6093      	str	r3, [r2, #8]

	//enable interrupts for ADC
	ADC1->IER |= (ADC_IER_EOCIE);			// interrupt on end of conversion
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <ADC_init+0x144>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <ADC_init+0x144>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6053      	str	r3, [r2, #4]
	ADC1->ISR &= ~(ADC_ISR_EOC);			// clear EOC flag
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <ADC_init+0x144>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <ADC_init+0x144>)
 8000fb6:	f023 0304 	bic.w	r3, r3, #4
 8000fba:	6013      	str	r3, [r2, #0]

	NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F));	// enable interrupt in NVIC
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <ADC_init+0x148>)
 8000fbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	50040300 	.word	0x50040300
 8000fd8:	50040000 	.word	0x50040000
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <ADC_volt_conv>:


void ADC_volt_conv(uint16_t dig_mvolt, char* retval)
// Calibrate millivolts and convert to a string for UART
{
 8000fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fe4:	b08e      	sub	sp, #56	; 0x38
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6139      	str	r1, [r7, #16]
 8000fea:	4601      	mov	r1, r0
 8000fec:	82f9      	strh	r1, [r7, #22]
	uint16_t mvolt;
	int64_t calib = (VREF * dig_mvolt) / RES;
 8000fee:	8af9      	ldrh	r1, [r7, #22]
 8000ff0:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000ff4:	fb00 f101 	mul.w	r1, r0, r1
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	da01      	bge.n	8001000 <ADC_volt_conv+0x20>
 8000ffc:	f601 71ff 	addw	r1, r1, #4095	; 0xfff
 8001000:	1309      	asrs	r1, r1, #12
 8001002:	17c8      	asrs	r0, r1, #31
 8001004:	4688      	mov	r8, r1
 8001006:	4681      	mov	r9, r0
 8001008:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	int64_t uvolt = CALIBRATED_MULT * calib - CALIBRATED_OFFSET;
 800100c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001010:	4640      	mov	r0, r8
 8001012:	4649      	mov	r1, r9
 8001014:	f04f 0a00 	mov.w	sl, #0
 8001018:	f04f 0b00 	mov.w	fp, #0
 800101c:	ea4f 1bc1 	mov.w	fp, r1, lsl #7
 8001020:	ea4b 6b50 	orr.w	fp, fp, r0, lsr #25
 8001024:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
 8001028:	4650      	mov	r0, sl
 800102a:	4659      	mov	r1, fp
 800102c:	ebb0 0208 	subs.w	r2, r0, r8
 8001030:	eb61 0309 	sbc.w	r3, r1, r9
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	0099      	lsls	r1, r3, #2
 800103e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001042:	0090      	lsls	r0, r2, #2
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ebb2 0408 	subs.w	r4, r2, r8
 800104c:	eb63 0509 	sbc.w	r5, r3, r9
 8001050:	1923      	adds	r3, r4, r4
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	eb45 0305 	adc.w	r3, r5, r5
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800105e:	4622      	mov	r2, r4
 8001060:	462b      	mov	r3, r5
 8001062:	493e      	ldr	r1, [pc, #248]	; (800115c <ADC_volt_conv+0x17c>)
 8001064:	1851      	adds	r1, r2, r1
 8001066:	6039      	str	r1, [r7, #0]
 8001068:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001072:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (uvolt < 0) {mvolt = calib;}
 8001076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da02      	bge.n	8001084 <ADC_volt_conv+0xa4>
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001082:	e00b      	b.n	800109c <ADC_volt_conv+0xbc>
	else {mvolt = uvolt / 1000;}
 8001084:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	f7ff fd26 	bl	8000ae0 <__aeabi_ldivmod>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4613      	mov	r3, r2
 800109a:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint8_t index = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	while(index < 4 || mvolt != 0)	// make sure value is 4 digits
 80010a2:	e01e      	b.n	80010e2 <ADC_volt_conv+0x102>
	{
		uint16_t digit = mvolt % 10;	// isolate digit
 80010a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <ADC_volt_conv+0x180>)
 80010a8:	fba3 1302 	umull	r1, r3, r3, r2
 80010ac:	08d9      	lsrs	r1, r3, #3
 80010ae:	460b      	mov	r3, r1
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	83bb      	strh	r3, [r7, #28]
		retval[index] = digit + '0';	// '0' converts to ASCII character
 80010ba:	8bbb      	ldrh	r3, [r7, #28]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	440b      	add	r3, r1
 80010c6:	3230      	adds	r2, #48	; 0x30
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
		mvolt /= 10;
 80010cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010ce:	4a24      	ldr	r2, [pc, #144]	; (8001160 <ADC_volt_conv+0x180>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	86fb      	strh	r3, [r7, #54]	; 0x36
		index++;
 80010d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010dc:	3301      	adds	r3, #1
 80010de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	while(index < 4 || mvolt != 0)	// make sure value is 4 digits
 80010e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d9dc      	bls.n	80010a4 <ADC_volt_conv+0xc4>
 80010ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1d9      	bne.n	80010a4 <ADC_volt_conv+0xc4>
	}

    // Reverse the string
    uint8_t i = 0, j = index - 1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80010f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (i < j)
 8001100:	e01f      	b.n	8001142 <ADC_volt_conv+0x162>
	{
        char temp = retval[i];
 8001102:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	77fb      	strb	r3, [r7, #31]
        retval[i] = retval[j];
 800110e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	441a      	add	r2, r3
 8001116:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	440b      	add	r3, r1
 800111e:	7812      	ldrb	r2, [r2, #0]
 8001120:	701a      	strb	r2, [r3, #0]
        retval[j] = temp;
 8001122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4413      	add	r3, r2
 800112a:	7ffa      	ldrb	r2, [r7, #31]
 800112c:	701a      	strb	r2, [r3, #0]
        i++;
 800112e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001132:	3301      	adds	r3, #1
 8001134:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        j--;
 8001138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800113c:	3b01      	subs	r3, #1
 800113e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (i < j)
 8001142:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800114a:	429a      	cmp	r2, r3
 800114c:	d3d9      	bcc.n	8001102 <ADC_volt_conv+0x122>
	}
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3738      	adds	r7, #56	; 0x38
 8001154:	46bd      	mov	sp, r7
 8001156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800115a:	bf00      	nop
 800115c:	ffffe5e4 	.word	0xffffe5e4
 8001160:	cccccccd 	.word	0xcccccccd

08001164 <main>:
 1.00 Vpp sine wave   2.5 V DC offset 627 Hz = 2.525 RMS		VPP = 1.025 - 0.975
 2.62 Vpp saw-tooth   1.5 V DC offset  54 Hz = 1.68 RMS			VPP = 2.645 - 2.595
 0.50 Vpp square wave 1.5 V DC offset  10 Hz = 1.5207			VPP = 0.525 - 0.475
*/
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  HAL_Init();
 800116e:	f000 fdbe 	bl	8001cee <HAL_Init>
  SystemClock_Config();
 8001172:	f000 fbb2 	bl	80018da <SystemClock_Config>
  ADC_init();
 8001176:	f7ff fe8d 	bl	8000e94 <ADC_init>
  UART_init();
 800117a:	f000 fc59 	bl	8001a30 <UART_init>
  char cvolt[4];
  char cvolt2[4];
  char cvolt3[4];

  // Configure TIM2 for interrupt; ARR may change due to calibration
  RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);
 800117e:	4bd0      	ldr	r3, [pc, #832]	; (80014c0 <main+0x35c>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4acf      	ldr	r2, [pc, #828]	; (80014c0 <main+0x35c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
  TIM2->DIER |= (TIM_DIER_UIE);
 800118a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	60d3      	str	r3, [r2, #12]
  TIM2->ARR = 15750;
 800119a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119e:	f643 5286 	movw	r2, #15750	; 0x3d86
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CR1 |= TIM_CR1_CEN;
 80011a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6013      	str	r3, [r2, #0]

  NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 80011b4:	4bc3      	ldr	r3, [pc, #780]	; (80014c4 <main+0x360>)
 80011b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ba:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80011bc:	b662      	cpsie	i
}
 80011be:	bf00      	nop
  __enable_irq();

  // instantiate fast Fourier transform struct
  arm_rfft_fast_instance_f32 fft_instance;
  arm_rfft_fast_init_f32(&fft_instance, SAMPLES);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	3b08      	subs	r3, #8
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fdde 	bl	8002d8c <arm_rfft_fast_init_f32>

  // Initialize table
  UART_ESC_code("2J");
 80011d0:	48bd      	ldr	r0, [pc, #756]	; (80014c8 <main+0x364>)
 80011d2:	f000 fd01 	bl	8001bd8 <UART_ESC_code>
  UART_ESC_code("8:0H");
 80011d6:	48bd      	ldr	r0, [pc, #756]	; (80014cc <main+0x368>)
 80011d8:	f000 fcfe 	bl	8001bd8 <UART_ESC_code>
  UART_print_string("|----|----|----|----|----|----|----");
 80011dc:	48bc      	ldr	r0, [pc, #752]	; (80014d0 <main+0x36c>)
 80011de:	f000 fc9f 	bl	8001b20 <UART_print_string>
  UART_ESC_code("9:0H");
 80011e2:	48bc      	ldr	r0, [pc, #752]	; (80014d4 <main+0x370>)
 80011e4:	f000 fcf8 	bl	8001bd8 <UART_ESC_code>
  UART_print_string("0   0.5  1.0  1.5  2.0  2.5  3.0");
 80011e8:	48bb      	ldr	r0, [pc, #748]	; (80014d8 <main+0x374>)
 80011ea:	f000 fc99 	bl	8001b20 <UART_print_string>


  while (1)
  {
    // wait for sample data to be collected and disable clock
	while(SAMPLE_DONE == FALSE);
 80011ee:	bf00      	nop
 80011f0:	4bba      	ldr	r3, [pc, #744]	; (80014dc <main+0x378>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0fb      	beq.n	80011f0 <main+0x8c>
	TIM2->CR1   		 &= ~(TIM_CR1_CEN);
 80011f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]


	arm_rfft_fast_f32(&fft_instance, samples, fft, 0);
 8001208:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800120c:	f107 0008 	add.w	r0, r7, #8
 8001210:	3808      	subs	r0, #8
 8001212:	2300      	movs	r3, #0
 8001214:	49b2      	ldr	r1, [pc, #712]	; (80014e0 <main+0x37c>)
 8001216:	f001 fe9d 	bl	8002f54 <arm_rfft_fast_f32>

	// 0 is DC Offset
	// Find the max of the real, imaginary pairs
	// Ex: [2][3] = 1 Hz, [4][5] = 2 Hz

	max = SAMPLES;   	 // 1024 to prevent floating
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8001226:	f101 0118 	add.w	r1, r1, #24
 800122a:	e9c1 2300 	strd	r2, r3, [r1]
	magnitude = 0;
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800123a:	f101 0108 	add.w	r1, r1, #8
 800123e:	e9c1 2300 	strd	r2, r3, [r1]
    frequency = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001248:	f102 0206 	add.w	r2, r2, #6
 800124c:	8013      	strh	r3, [r2, #0]

	for (uint16_t i = 2; i < SAMPLES; i += 2) {
 800124e:	2302      	movs	r3, #2
 8001250:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001254:	f102 0216 	add.w	r2, r2, #22
 8001258:	8013      	strh	r3, [r2, #0]
 800125a:	e074      	b.n	8001346 <main+0x1e2>
   	   magnitude = (fft[i] * fft[i]) + (fft[i+1] * fft[i+1]);
 800125c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001260:	f103 0316 	add.w	r3, r3, #22
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b20      	subs	r3, #32
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001278:	f103 0316 	add.w	r3, r3, #22
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	3b20      	subs	r3, #32
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001290:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001294:	f103 0316 	add.w	r3, r3, #22
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	3b20      	subs	r3, #32
 80012a6:	edd3 6a00 	vldr	s13, [r3]
 80012aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80012ae:	f103 0316 	add.w	r3, r3, #22
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b20      	subs	r3, #32
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012cc:	ee17 0a90 	vmov	r0, s15
 80012d0:	f7ff fc56 	bl	8000b80 <__aeabi_f2ulz>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80012dc:	f101 0108 	add.w	r1, r1, #8
 80012e0:	e9c1 2300 	strd	r2, r3, [r1]
   	   if (magnitude >= max){
 80012e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80012e8:	f103 0308 	add.w	r3, r3, #8
 80012ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80012f4:	f103 0318 	add.w	r3, r3, #24
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	4290      	cmp	r0, r2
 80012fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8001302:	d315      	bcc.n	8001330 <main+0x1cc>
   		 max = magnitude;
 8001304:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001308:	f103 0308 	add.w	r3, r3, #8
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8001314:	f101 0118 	add.w	r1, r1, #24
 8001318:	e9c1 2300 	strd	r2, r3, [r1]
   		 frequency = i;// / 2;
 800131c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001320:	f103 0316 	add.w	r3, r3, #22
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800132a:	f102 0206 	add.w	r2, r2, #6
 800132e:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 2; i < SAMPLES; i += 2) {
 8001330:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001334:	f103 0316 	add.w	r3, r3, #22
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	3302      	adds	r3, #2
 800133c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001340:	f102 0216 	add.w	r2, r2, #22
 8001344:	8013      	strh	r3, [r2, #0]
 8001346:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800134a:	f103 0316 	add.w	r3, r3, #22
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	d382      	bcc.n	800125c <main+0xf8>
   	   }
	}

	// Calibrate voltage
	ADC_volt_conv(voltage, cvolt);
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <main+0x380>)
 8001358:	881a      	ldrh	r2, [r3, #0]
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	3b08      	subs	r3, #8
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fe3c 	bl	8000fe0 <ADC_volt_conv>
	// Convert frequency to string
	uint16_to_string(frequency, cfreq);
 8001368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136c:	3b04      	subs	r3, #4
 800136e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001372:	f102 0206 	add.w	r2, r2, #6
 8001376:	8812      	ldrh	r2, [r2, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f000 fc3e 	bl	8001bfc <uint16_to_string>

	switch (mode)
 8001380:	4b59      	ldr	r3, [pc, #356]	; (80014e8 <main+0x384>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d05a      	beq.n	800143e <main+0x2da>
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 8083 	bne.w	8001494 <main+0x330>
	{
	case AC:
		ADC_volt_conv(vpp, cvolt2);					// calibrate peak-to-peak voltage
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <main+0x388>)
 8001390:	881a      	ldrh	r2, [r3, #0]
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	3b0c      	subs	r3, #12
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f7ff fe20 	bl	8000fe0 <ADC_volt_conv>
		ADC_volt_conv(dc_offset, cvolt3);			// calibrate DC offset
 80013a0:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <main+0x38c>)
 80013a2:	881a      	ldrh	r2, [r3, #0]
 80013a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a8:	3b10      	subs	r3, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	4610      	mov	r0, r2
 80013ae:	f7ff fe17 	bl	8000fe0 <ADC_volt_conv>
		UART_ESC_code("1:0H");   					// set cursor to line 1
 80013b2:	4850      	ldr	r0, [pc, #320]	; (80014f4 <main+0x390>)
 80013b4:	f000 fc10 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");						// clear line
 80013b8:	484f      	ldr	r0, [pc, #316]	; (80014f8 <main+0x394>)
 80013ba:	f000 fc0d 	bl	8001bd8 <UART_ESC_code>
		UART_print_string("Mode: AC");				// print mode
 80013be:	484f      	ldr	r0, [pc, #316]	; (80014fc <main+0x398>)
 80013c0:	f000 fbae 	bl	8001b20 <UART_print_string>
		UART_ESC_code("2:0H");						// set cursor to line 2
 80013c4:	484e      	ldr	r0, [pc, #312]	; (8001500 <main+0x39c>)
 80013c6:	f000 fc07 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");						// clear line
 80013ca:	484b      	ldr	r0, [pc, #300]	; (80014f8 <main+0x394>)
 80013cc:	f000 fc04 	bl	8001bd8 <UART_ESC_code>
		UART_print_string("Frequency: ");			// print frequency
 80013d0:	484c      	ldr	r0, [pc, #304]	; (8001504 <main+0x3a0>)
 80013d2:	f000 fba5 	bl	8001b20 <UART_print_string>
		UART_print_string(cfreq);
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	3b04      	subs	r3, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fb9f 	bl	8001b20 <UART_print_string>
		UART_ESC_code("3:0H");						// set cursor to line 3
 80013e2:	4849      	ldr	r0, [pc, #292]	; (8001508 <main+0x3a4>)
 80013e4:	f000 fbf8 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");						// clear line
 80013e8:	4843      	ldr	r0, [pc, #268]	; (80014f8 <main+0x394>)
 80013ea:	f000 fbf5 	bl	8001bd8 <UART_ESC_code>
		UART_print_string("Voltage (RMS): ");		// print Vrms
 80013ee:	4847      	ldr	r0, [pc, #284]	; (800150c <main+0x3a8>)
 80013f0:	f000 fb96 	bl	8001b20 <UART_print_string>
		print_voltage(cvolt);
 80013f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f8:	3b08      	subs	r3, #8
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fa46 	bl	800188c <print_voltage>
		UART_ESC_code("4:0H");						// set cursor to line 4
 8001400:	4843      	ldr	r0, [pc, #268]	; (8001510 <main+0x3ac>)
 8001402:	f000 fbe9 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");						// clear line
 8001406:	483c      	ldr	r0, [pc, #240]	; (80014f8 <main+0x394>)
 8001408:	f000 fbe6 	bl	8001bd8 <UART_ESC_code>
		UART_print_string("Voltage (VPP): ");		// print Vpp
 800140c:	4841      	ldr	r0, [pc, #260]	; (8001514 <main+0x3b0>)
 800140e:	f000 fb87 	bl	8001b20 <UART_print_string>
		print_voltage(cvolt2);
 8001412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001416:	3b0c      	subs	r3, #12
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fa37 	bl	800188c <print_voltage>
		UART_ESC_code("5:0H");						// set cursor to line 4
 800141e:	483e      	ldr	r0, [pc, #248]	; (8001518 <main+0x3b4>)
 8001420:	f000 fbda 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");						// clear line
 8001424:	4834      	ldr	r0, [pc, #208]	; (80014f8 <main+0x394>)
 8001426:	f000 fbd7 	bl	8001bd8 <UART_ESC_code>
		UART_print_string("Voltage Offset: ");		// print Vpp
 800142a:	483c      	ldr	r0, [pc, #240]	; (800151c <main+0x3b8>)
 800142c:	f000 fb78 	bl	8001b20 <UART_print_string>
		print_voltage(cvolt3);
 8001430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001434:	3b10      	subs	r3, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fa28 	bl	800188c <print_voltage>
		break;
 800143c:	e02a      	b.n	8001494 <main+0x330>
	case DC:
		UART_ESC_code("1:0H");   					// set cursor to line 1
 800143e:	482d      	ldr	r0, [pc, #180]	; (80014f4 <main+0x390>)
 8001440:	f000 fbca 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");						// clear line
 8001444:	482c      	ldr	r0, [pc, #176]	; (80014f8 <main+0x394>)
 8001446:	f000 fbc7 	bl	8001bd8 <UART_ESC_code>
		UART_print_string("Mode: DC");				// print mode
 800144a:	4835      	ldr	r0, [pc, #212]	; (8001520 <main+0x3bc>)
 800144c:	f000 fb68 	bl	8001b20 <UART_print_string>
		UART_ESC_code("2:0H");   					// set cursor to line 2
 8001450:	482b      	ldr	r0, [pc, #172]	; (8001500 <main+0x39c>)
 8001452:	f000 fbc1 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");						// clear line
 8001456:	4828      	ldr	r0, [pc, #160]	; (80014f8 <main+0x394>)
 8001458:	f000 fbbe 	bl	8001bd8 <UART_ESC_code>
		UART_print_string("Voltage (AVG): ");		// print Vavg
 800145c:	4831      	ldr	r0, [pc, #196]	; (8001524 <main+0x3c0>)
 800145e:	f000 fb5f 	bl	8001b20 <UART_print_string>
		print_voltage(cvolt);
 8001462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001466:	3b08      	subs	r3, #8
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fa0f 	bl	800188c <print_voltage>
		UART_ESC_code("3:0H");						// clear Vrms line
 800146e:	4826      	ldr	r0, [pc, #152]	; (8001508 <main+0x3a4>)
 8001470:	f000 fbb2 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");
 8001474:	4820      	ldr	r0, [pc, #128]	; (80014f8 <main+0x394>)
 8001476:	f000 fbaf 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("4:0H");						// clear Vpp line
 800147a:	4825      	ldr	r0, [pc, #148]	; (8001510 <main+0x3ac>)
 800147c:	f000 fbac 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");
 8001480:	481d      	ldr	r0, [pc, #116]	; (80014f8 <main+0x394>)
 8001482:	f000 fba9 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("5:0H");						// clear offset line
 8001486:	4824      	ldr	r0, [pc, #144]	; (8001518 <main+0x3b4>)
 8001488:	f000 fba6 	bl	8001bd8 <UART_ESC_code>
		UART_ESC_code("2K");
 800148c:	481a      	ldr	r0, [pc, #104]	; (80014f8 <main+0x394>)
 800148e:	f000 fba3 	bl	8001bd8 <UART_ESC_code>
		break;
 8001492:	bf00      	nop
	}
	// print voltage to graph
	print_graph(cvolt);
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	3b08      	subs	r3, #8
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f9b8 	bl	8001810 <print_graph>

	// reset globals
	voltage = 0;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <main+0x380>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	801a      	strh	r2, [r3, #0]
	vpp = 0;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <main+0x388>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
	dc_offset = 0;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <main+0x38c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	801a      	strh	r2, [r3, #0]

	// wait
	for (int i = 0; i < 5000000; i++);
 80014b2:	2300      	movs	r3, #0
 80014b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80014b8:	f102 0210 	add.w	r2, r2, #16
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e03e      	b.n	800153e <main+0x3da>
 80014c0:	40021000 	.word	0x40021000
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	08003ec8 	.word	0x08003ec8
 80014cc:	08003ecc 	.word	0x08003ecc
 80014d0:	08003ed4 	.word	0x08003ed4
 80014d4:	08003ef8 	.word	0x08003ef8
 80014d8:	08003f00 	.word	0x08003f00
 80014dc:	20001094 	.word	0x20001094
 80014e0:	20000094 	.word	0x20000094
 80014e4:	20001096 	.word	0x20001096
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20001098 	.word	0x20001098
 80014f0:	2000109a 	.word	0x2000109a
 80014f4:	08003f24 	.word	0x08003f24
 80014f8:	08003f2c 	.word	0x08003f2c
 80014fc:	08003f30 	.word	0x08003f30
 8001500:	08003f3c 	.word	0x08003f3c
 8001504:	08003f44 	.word	0x08003f44
 8001508:	08003f50 	.word	0x08003f50
 800150c:	08003f58 	.word	0x08003f58
 8001510:	08003f68 	.word	0x08003f68
 8001514:	08003f70 	.word	0x08003f70
 8001518:	08003f80 	.word	0x08003f80
 800151c:	08003f88 	.word	0x08003f88
 8001520:	08003f9c 	.word	0x08003f9c
 8001524:	08003fa8 	.word	0x08003fa8
 8001528:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800152c:	f103 0310 	add.w	r3, r3, #16
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001538:	f102 0210 	add.w	r2, r2, #16
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001542:	f103 0310 	add.w	r3, r3, #16
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <main+0x404>)
 800154a:	4293      	cmp	r3, r2
 800154c:	ddec      	ble.n	8001528 <main+0x3c4>
	SAMPLE_DONE = FALSE;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <main+0x408>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
	TIM2->CR1   		 |= TIM_CR1_CEN;   		// re-enable clock
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]
	while(SAMPLE_DONE == FALSE);
 8001564:	e643      	b.n	80011ee <main+0x8a>
 8001566:	bf00      	nop
 8001568:	004c4b3f 	.word	0x004c4b3f
 800156c:	20001094 	.word	0x20001094

08001570 <ADC1_2_IRQHandler>:
  }
}

void ADC1_2_IRQHandler(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    if (ADC1 -> ISR & ADC_ISR_EOC) {
 8001574:	4b74      	ldr	r3, [pc, #464]	; (8001748 <ADC1_2_IRQHandler+0x1d8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80e0 	beq.w	8001742 <ADC1_2_IRQHandler+0x1d2>
   	 static uint32_t i = 0;
   	 static uint32_t ADC_min = 0;
     static uint32_t ADC_max = 0;
     static uint32_t sum = 0;
     static float64_t sum2 = 0;
   	 if (i != SAMPLES){
 8001582:	4b72      	ldr	r3, [pc, #456]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158a:	f000 8084 	beq.w	8001696 <ADC1_2_IRQHandler+0x126>
   		 samples[i] = (float) ADC1 -> DR;
 800158e:	4b6e      	ldr	r3, [pc, #440]	; (8001748 <ADC1_2_IRQHandler+0x1d8>)
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001592:	4b6e      	ldr	r3, [pc, #440]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	ee07 2a90 	vmov	s15, r2
 800159a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800159e:	4a6c      	ldr	r2, [pc, #432]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	edc3 7a00 	vstr	s15, [r3]
   		 if (samples[i] < ADC_min)		// check if less than current min
 80015a8:	4b68      	ldr	r3, [pc, #416]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a68      	ldr	r2, [pc, #416]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b67      	ldr	r3, [pc, #412]	; (8001754 <ADC1_2_IRQHandler+0x1e4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d50c      	bpl.n	80015e6 <ADC1_2_IRQHandler+0x76>
   		 {
   			 ADC_min = samples[i];
 80015cc:	4b5f      	ldr	r3, [pc, #380]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a5f      	ldr	r2, [pc, #380]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015de:	ee17 2a90 	vmov	r2, s15
 80015e2:	4b5c      	ldr	r3, [pc, #368]	; (8001754 <ADC1_2_IRQHandler+0x1e4>)
 80015e4:	601a      	str	r2, [r3, #0]
   		 }
   		 if (samples[i] > ADC_max)		// check if greater than current max
 80015e6:	4b59      	ldr	r3, [pc, #356]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a59      	ldr	r2, [pc, #356]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	ed93 7a00 	vldr	s14, [r3]
 80015f4:	4b58      	ldr	r3, [pc, #352]	; (8001758 <ADC1_2_IRQHandler+0x1e8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001608:	dd0c      	ble.n	8001624 <ADC1_2_IRQHandler+0xb4>
   		 {
   			 ADC_max = samples[i];
 800160a:	4b50      	ldr	r3, [pc, #320]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a50      	ldr	r2, [pc, #320]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161c:	ee17 2a90 	vmov	r2, s15
 8001620:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <ADC1_2_IRQHandler+0x1e8>)
 8001622:	601a      	str	r2, [r3, #0]
   		 }
   		 // add to sum for average
   		 sum += samples[i];
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <ADC1_2_IRQHandler+0x1ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a46      	ldr	r2, [pc, #280]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001646:	ee17 2a90 	vmov	r2, s15
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <ADC1_2_IRQHandler+0x1ec>)
 800164c:	601a      	str	r2, [r3, #0]

   		 // add to sum^2 for rms
   		 sum2 += (float64_t)(samples[i] * samples[i]);
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a3f      	ldr	r2, [pc, #252]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	ed93 7a00 	vldr	s14, [r3]
 800165c:	4b3b      	ldr	r3, [pc, #236]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3b      	ldr	r2, [pc, #236]	; (8001750 <ADC1_2_IRQHandler+0x1e0>)
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff0d 	bl	8000490 <__aeabi_f2d>
 8001676:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <ADC1_2_IRQHandler+0x1f0>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe fdaa 	bl	80001d4 <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4936      	ldr	r1, [pc, #216]	; (8001760 <ADC1_2_IRQHandler+0x1f0>)
 8001686:	e9c1 2300 	strd	r2, r3, [r1]
   		 i++;
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a2e      	ldr	r2, [pc, #184]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 8001692:	6013      	str	r3, [r2, #0]
   		 sum = 0;
   		 sum2 = 0;
   		 SAMPLE_DONE = TRUE;
   	 }
    }
}
 8001694:	e055      	b.n	8001742 <ADC1_2_IRQHandler+0x1d2>
   		 switch(mode)
 8001696:	4b33      	ldr	r3, [pc, #204]	; (8001764 <ADC1_2_IRQHandler+0x1f4>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d033      	beq.n	8001706 <ADC1_2_IRQHandler+0x196>
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d138      	bne.n	8001714 <ADC1_2_IRQHandler+0x1a4>
   	   		 vpp = (ADC_max - ADC_max_calib) - (ADC_min + ADC_min_calib);
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <ADC1_2_IRQHandler+0x1e8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <ADC1_2_IRQHandler+0x1e4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b19      	subs	r3, #25
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <ADC1_2_IRQHandler+0x1f8>)
 80016b8:	801a      	strh	r2, [r3, #0]
   			 voltage = sqrt(sum2/SAMPLES);
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <ADC1_2_IRQHandler+0x1f0>)
 80016bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <ADC1_2_IRQHandler+0x1fc>)
 80016c6:	f7ff f865 	bl	8000794 <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	ec43 2b17 	vmov	d7, r2, r3
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	eef0 0a67 	vmov.f32	s1, s15
 80016da:	f002 fb0b 	bl	8003cf4 <sqrt>
 80016de:	ec53 2b10 	vmov	r2, r3, d0
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f9db 	bl	8000aa0 <__aeabi_d2uiz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <ADC1_2_IRQHandler+0x200>)
 80016f0:	801a      	strh	r2, [r3, #0]
   			 dc_offset = (ADC_max + ADC_min) / 2;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <ADC1_2_IRQHandler+0x1e8>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <ADC1_2_IRQHandler+0x1e4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <ADC1_2_IRQHandler+0x204>)
 8001702:	801a      	strh	r2, [r3, #0]
   			 break;
 8001704:	e006      	b.n	8001714 <ADC1_2_IRQHandler+0x1a4>
   			 voltage = sum / SAMPLES;;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <ADC1_2_IRQHandler+0x1ec>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0a9b      	lsrs	r3, r3, #10
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <ADC1_2_IRQHandler+0x200>)
 8001710:	801a      	strh	r2, [r3, #0]
   			 break;
 8001712:	bf00      	nop
   		 i = 0;
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <ADC1_2_IRQHandler+0x1dc>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
   		 ADC_min = ADC_max;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <ADC1_2_IRQHandler+0x1e8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <ADC1_2_IRQHandler+0x1e4>)
 8001720:	6013      	str	r3, [r2, #0]
   		 ADC_max = 0;
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <ADC1_2_IRQHandler+0x1e8>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
   		 sum = 0;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <ADC1_2_IRQHandler+0x1ec>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
   		 sum2 = 0;
 800172e:	490c      	ldr	r1, [pc, #48]	; (8001760 <ADC1_2_IRQHandler+0x1f0>)
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c1 2300 	strd	r2, r3, [r1]
   		 SAMPLE_DONE = TRUE;
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <ADC1_2_IRQHandler+0x208>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	50040000 	.word	0x50040000
 800174c:	2000109c 	.word	0x2000109c
 8001750:	20000094 	.word	0x20000094
 8001754:	200010a0 	.word	0x200010a0
 8001758:	200010a4 	.word	0x200010a4
 800175c:	200010a8 	.word	0x200010a8
 8001760:	200010b0 	.word	0x200010b0
 8001764:	20000000 	.word	0x20000000
 8001768:	20001098 	.word	0x20001098
 800176c:	40900000 	.word	0x40900000
 8001770:	20001096 	.word	0x20001096
 8001774:	2000109a 	.word	0x2000109a
 8001778:	20001094 	.word	0x20001094

0800177c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  // check status register for update event flag
    if (TIM2->SR & TIM_SR_UIF) {
 8001780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00d      	beq.n	80017aa <TIM2_IRQHandler+0x2e>
   	   ADC1 -> CR |= ADC_CR_ADSTART;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <TIM2_IRQHandler+0x38>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <TIM2_IRQHandler+0x38>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6093      	str	r3, [r2, #8]
   	   TIM2 -> SR &= ~(TIM_SR_UIF);
 800179a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6113      	str	r3, [r2, #16]
    }
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	50040000 	.word	0x50040000

080017b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
	// Check if character has been received
	if (USART2->ISR & USART_ISR_RXNE)
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <USART2_IRQHandler+0x50>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d011      	beq.n	80017ee <USART2_IRQHandler+0x36>
	{
		uint8_t received = USART2->RDR;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <USART2_IRQHandler+0x50>)
 80017cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	71fb      	strb	r3, [r7, #7]

		switch(received)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b61      	cmp	r3, #97	; 0x61
 80017d6:	d002      	beq.n	80017de <USART2_IRQHandler+0x26>
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d004      	beq.n	80017e6 <USART2_IRQHandler+0x2e>
 80017dc:	e008      	b.n	80017f0 <USART2_IRQHandler+0x38>
		{
			case ('A' | 'a'):
				mode = AC;	// set mode to AC
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <USART2_IRQHandler+0x54>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
				break;
 80017e4:	e004      	b.n	80017f0 <USART2_IRQHandler+0x38>
			case ('D' | 'd'):
				mode = DC;	// set mode to DC
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <USART2_IRQHandler+0x54>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
				break;
 80017ec:	e000      	b.n	80017f0 <USART2_IRQHandler+0x38>
		}
	}
 80017ee:	bf00      	nop
	// Reset received data flag
	USART2->ISR &= ~(USART_ISR_RXNE);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <USART2_IRQHandler+0x50>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <USART2_IRQHandler+0x50>)
 80017f6:	f023 0320 	bic.w	r3, r3, #32
 80017fa:	61d3      	str	r3, [r2, #28]

}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40004400 	.word	0x40004400
 800180c:	20000000 	.word	0x20000000

08001810 <print_graph>:

void print_graph(char* volt)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	UART_ESC_code("7:0H");
 8001818:	4819      	ldr	r0, [pc, #100]	; (8001880 <print_graph+0x70>)
 800181a:	f000 f9dd 	bl	8001bd8 <UART_ESC_code>
	UART_ESC_code("2K");		// clear line
 800181e:	4819      	ldr	r0, [pc, #100]	; (8001884 <print_graph+0x74>)
 8001820:	f000 f9da 	bl	8001bd8 <UART_ESC_code>
	uint16_t i;
	uint16_t intvalue = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	81bb      	strh	r3, [r7, #12]

	// convert char array back to int
	for (i = 0; i < 4; i++) {
 8001828:	2300      	movs	r3, #0
 800182a:	81fb      	strh	r3, [r7, #14]
 800182c:	e011      	b.n	8001852 <print_graph+0x42>
		intvalue = intvalue * 10 + (volt[i] - '0');
 800182e:	89bb      	ldrh	r3, [r7, #12]
 8001830:	461a      	mov	r2, r3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4413      	add	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	440b      	add	r3, r1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b30      	subs	r3, #48	; 0x30
 800184a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < 4; i++) {
 800184c:	89fb      	ldrh	r3, [r7, #14]
 800184e:	3301      	adds	r3, #1
 8001850:	81fb      	strh	r3, [r7, #14]
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d9ea      	bls.n	800182e <print_graph+0x1e>
	}
	// print to graph
	for (i = 0; i <= intvalue; i+=100){
 8001858:	2300      	movs	r3, #0
 800185a:	81fb      	strh	r3, [r7, #14]
 800185c:	e005      	b.n	800186a <print_graph+0x5a>
		UART_print_char('X');
 800185e:	2058      	movs	r0, #88	; 0x58
 8001860:	f000 f990 	bl	8001b84 <UART_print_char>
	for (i = 0; i <= intvalue; i+=100){
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	3364      	adds	r3, #100	; 0x64
 8001868:	81fb      	strh	r3, [r7, #14]
 800186a:	89fa      	ldrh	r2, [r7, #14]
 800186c:	89bb      	ldrh	r3, [r7, #12]
 800186e:	429a      	cmp	r2, r3
 8001870:	d9f5      	bls.n	800185e <print_graph+0x4e>
	}
	UART_ESC_code("10:0H");
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <print_graph+0x78>)
 8001874:	f000 f9b0 	bl	8001bd8 <UART_ESC_code>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	08003fb8 	.word	0x08003fb8
 8001884:	08003f2c 	.word	0x08003f2c
 8001888:	08003fc0 	.word	0x08003fc0

0800188c <print_voltage>:

void print_voltage(char* volt)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	char c = *volt;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	73fb      	strb	r3, [r7, #15]
	UART_print_char(c);				// print first digit
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f971 	bl	8001b84 <UART_print_char>
	UART_print_char(0x2e);			// add decimal
 80018a2:	202e      	movs	r0, #46	; 0x2e
 80018a4:	f000 f96e 	bl	8001b84 <UART_print_char>
	c = *(volt+1);					// shift to first decimal
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	73fb      	strb	r3, [r7, #15]
	UART_print_char(c);				// print next digit
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f967 	bl	8001b84 <UART_print_char>
	c = *(volt+2);					// shift to second decimal
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	73fb      	strb	r3, [r7, #15]
	UART_print_char(c);				// print next digit
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f960 	bl	8001b84 <UART_print_char>
	c = *(volt+3);					// shift to third decimal
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	78db      	ldrb	r3, [r3, #3]
 80018c8:	73fb      	strb	r3, [r7, #15]
	UART_print_char(c);				// print next digit
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f959 	bl	8001b84 <UART_print_char>
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <SystemClock_Config>:


void SystemClock_Config(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b096      	sub	sp, #88	; 0x58
 80018de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2244      	movs	r2, #68	; 0x44
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 f9fb 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ee:	463b      	mov	r3, r7
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001900:	f000 fb5e 	bl	8001fc0 <HAL_PWREx_ControlVoltageScaling>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800190a:	f000 f82c 	bl	8001966 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800190e:	2310      	movs	r3, #16
 8001910:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001912:	2301      	movs	r3, #1
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800191a:	23a0      	movs	r3, #160	; 0xa0
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fba0 	bl	800206c <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001932:	f000 f818 	bl	8001966 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f000 ff68 	bl	8002824 <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800195a:	f000 f804 	bl	8001966 <Error_Handler>
  }
}
 800195e:	bf00      	nop
 8001960:	3758      	adds	r7, #88	; 0x58
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196a:	b672      	cpsid	i
}
 800196c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196e:	e7fe      	b.n	800196e <Error_Handler+0x8>

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6613      	str	r3, [r2, #96]	; 0x60
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x44>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f9c8 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <UART_init>:
#define SYS_CLK 4000000
#define BAUD 115200


void UART_init()
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	//Enable USART timer
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8001a34:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <UART_init+0xe4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	4a36      	ldr	r2, [pc, #216]	; (8001b14 <UART_init+0xe4>)
 8001a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3e:	6593      	str	r3, [r2, #88]	; 0x58

	//Enable GPIO timer
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <UART_init+0xe4>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <UART_init+0xe4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001a4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001a5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a66:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001a6a:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);	// push pull output
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8001a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a7a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos);			// Enable TX on PA2
 8001a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos);			// Enable RX on PA3
 8001a8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a96:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001a9a:	6213      	str	r3, [r2, #32]


	USART2->CR1 &= ~(USART_CR1_UE);							// Turn off USART
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <UART_init+0xe8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <UART_init+0xe8>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_RE | USART_CR1_TE);			// Enable transmitter and receiver
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <UART_init+0xe8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <UART_init+0xe8>)
 8001aae:	f043 030c 	orr.w	r3, r3, #12
 8001ab2:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~(USART_CR1_OVER8);						// Set to oversample by 16
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <UART_init+0xe8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <UART_init+0xe8>)
 8001aba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001abe:	6013      	str	r3, [r2, #0]
	USART2->BRR = 277;										// 32MHz / 115.2kbps ~ 277
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <UART_init+0xe8>)
 8001ac2:	f240 1215 	movw	r2, #277	; 0x115
 8001ac6:	60da      	str	r2, [r3, #12]
	USART2->CR2 &= ~(USART_CR2_STOP);						// Set 1 bit stop
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <UART_init+0xe8>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <UART_init+0xe8>)
 8001ace:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad2:	6053      	str	r3, [r2, #4]
	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);			// Set to 8 data bits
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <UART_init+0xe8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <UART_init+0xe8>)
 8001ada:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001ade:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~(USART_CR1_PCE);						// Set no parity
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <UART_init+0xe8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <UART_init+0xe8>)
 8001ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_UE);							// Enable USART
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <UART_init+0xe8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <UART_init+0xe8>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]


    // Enable interrupt in NVIC
	USART2->CR1 |= USART_CR1_RXNEIE;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <UART_init+0xe8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <UART_init+0xe8>)
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	6013      	str	r3, [r2, #0]
    NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <UART_init+0xec>)
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	605a      	str	r2, [r3, #4]


}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <UART_print_string>:

void UART_print_string(char *str)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8001b28:	e01f      	b.n	8001b6a <UART_print_string+0x4a>
        // Wait for the TX buffer to be empty
        while (!(USART2->ISR & USART_ISR_TXE));
 8001b2a:	bf00      	nop
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <UART_print_string+0x60>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f9      	beq.n	8001b2c <UART_print_string+0xc>

        // Send the character
        USART2->TDR = (*str);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <UART_print_string+0x60>)
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	851a      	strh	r2, [r3, #40]	; 0x28

        // Wait for transmission complete
        while (!(USART2->ISR & USART_ISR_TC));
 8001b42:	bf00      	nop
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <UART_print_string+0x60>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f9      	beq.n	8001b44 <UART_print_string+0x24>

        // Move to the next character
        str++;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]

        // Add a delay to ensure previous transmission is complete
        for (int i = 0; i < 1000; i++);
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e002      	b.n	8001b62 <UART_print_string+0x42>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b68:	dbf8      	blt.n	8001b5c <UART_print_string+0x3c>
    while (*str != '\0') {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1db      	bne.n	8001b2a <UART_print_string+0xa>
    }
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40004400 	.word	0x40004400

08001b84 <UART_print_char>:

void UART_print_char(char c)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8001b8e:	bf00      	nop
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <UART_print_char+0x50>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f9      	beq.n	8001b90 <UART_print_char+0xc>

    // Send the character
    USART2->TDR = c;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <UART_print_char+0x50>)
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28

    // Wait for transmission complete
    while (!(USART2->ISR & USART_ISR_TC));
 8001ba4:	bf00      	nop
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <UART_print_char+0x50>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f9      	beq.n	8001ba6 <UART_print_char+0x22>

    // Add a delay to ensure previous transmission is complete
    for (int i = 0; i < 1000; i++);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e002      	b.n	8001bbe <UART_print_char+0x3a>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bc4:	dbf8      	blt.n	8001bb8 <UART_print_char+0x34>
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <UART_ESC_code>:

void UART_ESC_code(char *str)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
		UART_print_char(ESC); // ESC character
 8001be0:	201b      	movs	r0, #27
 8001be2:	f7ff ffcf 	bl	8001b84 <UART_print_char>
		UART_print_char(lbracket); // [ character
 8001be6:	205b      	movs	r0, #91	; 0x5b
 8001be8:	f7ff ffcc 	bl	8001b84 <UART_print_char>
		UART_print_string(str);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff97 	bl	8001b20 <UART_print_string>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <uint16_to_string>:


void uint16_to_string(uint16_t integer, char* str)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	80fb      	strh	r3, [r7, #6]
    uint16_t divisor = 10000;
 8001c08:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c0c:	82fb      	strh	r3, [r7, #22]
    int index = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
   	 // Handle the case where the value is zero
   	 if (integer == 0) {
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d131      	bne.n	8001c7c <uint16_to_string+0x80>
   		 str[index++] = '0';
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	613a      	str	r2, [r7, #16]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	2230      	movs	r2, #48	; 0x30
 8001c26:	701a      	strb	r2, [r3, #0]
   		 str[index] = '\0';
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
   		 return;
 8001c32:	e02b      	b.n	8001c8c <uint16_to_string+0x90>
    }
   	 // Handle the case where the value is greater than zero
   	 while (divisor > 0) {
   		 uint16_t quotient = integer / divisor;
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	8afb      	ldrh	r3, [r7, #22]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	81fb      	strh	r3, [r7, #14]
   		 if (quotient > 0 || index > 0) {
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <uint16_to_string+0x4e>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	dd12      	ble.n	8001c70 <uint16_to_string+0x74>
   			 str[index++] = quotient + '0';
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1c59      	adds	r1, r3, #1
 8001c52:	6139      	str	r1, [r7, #16]
 8001c54:	4619      	mov	r1, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	440b      	add	r3, r1
 8001c5a:	3230      	adds	r2, #48	; 0x30
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]
   			 integer -= quotient * divisor;
 8001c60:	89fa      	ldrh	r2, [r7, #14]
 8001c62:	8afb      	ldrh	r3, [r7, #22]
 8001c64:	fb12 f303 	smulbb	r3, r2, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	80fb      	strh	r3, [r7, #6]
    }
   		 divisor /= 10;
 8001c70:	8afb      	ldrh	r3, [r7, #22]
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <uint16_to_string+0x9c>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	82fb      	strh	r3, [r7, #22]
   	 while (divisor > 0) {
 8001c7c:	8afb      	ldrh	r3, [r7, #22]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1d8      	bne.n	8001c34 <uint16_to_string+0x38>
    }
    str[index] = '\0';
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
}
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	cccccccd 	.word	0xcccccccd

08001c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff feb4 	bl	8001a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	; (8001cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <LoopForever+0xe>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	; (8001ce8 <LoopForever+0x16>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f001 ffe7 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cce:	f7ff fa49 	bl	8001164 <main>

08001cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd2:	e7fe      	b.n	8001cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ce0:	08017000 	.word	0x08017000
  ldr r2, =_sbss
 8001ce4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ce8:	200010bc 	.word	0x200010bc

08001cec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC3_IRQHandler>

08001cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 f91f 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f000 f80e 	bl	8001d20 <HAL_InitTick>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	e001      	b.n	8001d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d10:	f7ff fe2e 	bl	8001970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d14:	79fb      	ldrb	r3, [r7, #7]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_InitTick+0x6c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_InitTick+0x70>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_InitTick+0x6c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f91d 	bl	8001f8a <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d809      	bhi.n	8001d70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d64:	f000 f8f5 	bl	8001f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_InitTick+0x74>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e007      	b.n	8001d80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e004      	b.n	8001d80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	e001      	b.n	8001d80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000000c 	.word	0x2000000c
 8001d90:	20000004 	.word	0x20000004
 8001d94:	20000008 	.word	0x20000008

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	200010b8 	.word	0x200010b8

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200010b8 	.word	0x200010b8

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff47 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff5c 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff8e 	bl	8001e90 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffb0 	bl	8001ef8 <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fce:	d130      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fdc:	d038      	beq.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2232      	movs	r2, #50	; 0x32
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9b      	lsrs	r3, r3, #18
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002004:	e002      	b.n	800200c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3b01      	subs	r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002018:	d102      	bne.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x60>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f2      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d110      	bne.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e00f      	b.n	8002052 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203e:	d007      	beq.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40007000 	.word	0x40007000
 8002064:	20000004 	.word	0x20000004
 8002068:	431bde83 	.word	0x431bde83

0800206c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e3ca      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207e:	4b97      	ldr	r3, [pc, #604]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002088:	4b94      	ldr	r3, [pc, #592]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80e4 	beq.w	8002268 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4a>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	f040 808b 	bne.w	80021c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 8087 	bne.w	80021c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x62>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e3a2      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <HAL_RCC_OscConfig+0x7c>
 80020de:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_OscConfig+0x88>
 80020e8:	4b7c      	ldr	r3, [pc, #496]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d223      	bcs.n	8002140 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fd1d 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e383      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800210c:	4b73      	ldr	r3, [pc, #460]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a72      	ldr	r2, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b70      	ldr	r3, [pc, #448]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	496d      	ldr	r1, [pc, #436]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212a:	4b6c      	ldr	r3, [pc, #432]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	4968      	ldr	r1, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
 800213e:	e025      	b.n	800218c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002140:	4b66      	ldr	r3, [pc, #408]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b63      	ldr	r3, [pc, #396]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4960      	ldr	r1, [pc, #384]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215e:	4b5f      	ldr	r3, [pc, #380]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	495b      	ldr	r1, [pc, #364]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fcdd 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e343      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800218c:	f000 fc4a 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b52      	ldr	r3, [pc, #328]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	4950      	ldr	r1, [pc, #320]	; (80022e0 <HAL_RCC_OscConfig+0x274>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
 80021a8:	4a4e      	ldr	r2, [pc, #312]	; (80022e4 <HAL_RCC_OscConfig+0x278>)
 80021aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021ac:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fdb5 	bl	8001d20 <HAL_InitTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d052      	beq.n	8002266 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	e327      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d032      	beq.n	8002232 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fdf2 	bl	8001dc0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e0:	f7ff fdee 	bl	8001dc0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e310      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f2:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a36      	ldr	r2, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4931      	ldr	r1, [pc, #196]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800221c:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	492c      	ldr	r1, [pc, #176]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e01a      	b.n	8002268 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a29      	ldr	r2, [pc, #164]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800223e:	f7ff fdbf 	bl	8001dc0 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002246:	f7ff fdbb 	bl	8001dc0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e2dd      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x1da>
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002266:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d074      	beq.n	800235e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b08      	cmp	r3, #8
 8002278:	d005      	beq.n	8002286 <HAL_RCC_OscConfig+0x21a>
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d10e      	bne.n	800229e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d10b      	bne.n	800229e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d064      	beq.n	800235c <HAL_RCC_OscConfig+0x2f0>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d160      	bne.n	800235c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e2ba      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x24a>
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e026      	b.n	8002304 <HAL_RCC_OscConfig+0x298>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022be:	d115      	bne.n	80022ec <HAL_RCC_OscConfig+0x280>
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a05      	ldr	r2, [pc, #20]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80022c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a02      	ldr	r2, [pc, #8]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e014      	b.n	8002304 <HAL_RCC_OscConfig+0x298>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08003fc8 	.word	0x08003fc8
 80022e4:	20000004 	.word	0x20000004
 80022e8:	20000008 	.word	0x20000008
 80022ec:	4ba0      	ldr	r3, [pc, #640]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a9f      	ldr	r2, [pc, #636]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b9d      	ldr	r3, [pc, #628]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a9c      	ldr	r2, [pc, #624]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff fd58 	bl	8001dc0 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff fd54 	bl	8001dc0 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e276      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x2a8>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fd44 	bl	8001dc0 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fd40 	bl	8001dc0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e262      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x2d0>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d060      	beq.n	800242c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d005      	beq.n	800237c <HAL_RCC_OscConfig+0x310>
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d119      	bne.n	80023aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d116      	bne.n	80023aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	4b7c      	ldr	r3, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_OscConfig+0x328>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e23f      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	4973      	ldr	r1, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a8:	e040      	b.n	800242c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d023      	beq.n	80023fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7ff fcff 	bl	8001dc0 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c6:	f7ff fcfb 	bl	8001dc0 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e21d      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b62      	ldr	r3, [pc, #392]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	495f      	ldr	r1, [pc, #380]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
 80023f8:	e018      	b.n	800242c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a5c      	ldr	r2, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7ff fcdb 	bl	8001dc0 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7ff fcd7 	bl	8001dc0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1f9      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d03c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01c      	beq.n	800247a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002446:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff fcb6 	bl	8001dc0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fcb2 	bl	8001dc0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1d4      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ef      	beq.n	8002458 <HAL_RCC_OscConfig+0x3ec>
 8002478:	e01b      	b.n	80024b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002480:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7ff fc99 	bl	8001dc0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7ff fc95 	bl	8001dc0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e1b7      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a4:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ef      	bne.n	8002492 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80a6 	beq.w	800260c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10d      	bne.n	80024ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024da:	6593      	str	r3, [r2, #88]	; 0x58
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e8:	2301      	movs	r3, #1
 80024ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_RCC_OscConfig+0x508>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d118      	bne.n	800252a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_RCC_OscConfig+0x508>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x508>)
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002504:	f7ff fc5c 	bl	8001dc0 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250c:	f7ff fc58 	bl	8001dc0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e17a      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_RCC_OscConfig+0x508>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x4d8>
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002542:	e029      	b.n	8002598 <HAL_RCC_OscConfig+0x52c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d115      	bne.n	8002578 <HAL_RCC_OscConfig+0x50c>
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <HAL_RCC_OscConfig+0x504>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x52c>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
 8002578:	4b9c      	ldr	r3, [pc, #624]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	4a9b      	ldr	r2, [pc, #620]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002588:	4b98      	ldr	r3, [pc, #608]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	4a97      	ldr	r2, [pc, #604]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d016      	beq.n	80025ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7ff fc0e 	bl	8001dc0 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7ff fc0a 	bl	8001dc0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e12a      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025be:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ed      	beq.n	80025a8 <HAL_RCC_OscConfig+0x53c>
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7ff fbf7 	bl	8001dc0 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7ff fbf3 	bl	8001dc0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e113      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ec:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ed      	bne.n	80025d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fa:	7ffb      	ldrb	r3, [r7, #31]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b7a      	ldr	r3, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	4a79      	ldr	r2, [pc, #484]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80fe 	beq.w	8002812 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 80d0 	bne.w	80027c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002620:	4b72      	ldr	r3, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	429a      	cmp	r2, r3
 8002632:	d130      	bne.n	8002696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	3b01      	subs	r3, #1
 8002640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d127      	bne.n	8002696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d11f      	bne.n	8002696 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002660:	2a07      	cmp	r2, #7
 8002662:	bf14      	ite	ne
 8002664:	2201      	movne	r2, #1
 8002666:	2200      	moveq	r2, #0
 8002668:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d109      	bne.n	8002696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d06e      	beq.n	8002774 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d069      	beq.n	8002770 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0ad      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026b8:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80026be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c4:	f7ff fb7c 	bl	8001dc0 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff fb78 	bl	8001dc0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e09a      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026de:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ea:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_RCC_OscConfig+0x784>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002704:	0212      	lsls	r2, r2, #8
 8002706:	4311      	orrs	r1, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800270c:	0852      	lsrs	r2, r2, #1
 800270e:	3a01      	subs	r2, #1
 8002710:	0552      	lsls	r2, r2, #21
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002718:	0852      	lsrs	r2, r2, #1
 800271a:	3a01      	subs	r2, #1
 800271c:	0652      	lsls	r2, r2, #25
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002724:	0912      	lsrs	r2, r2, #4
 8002726:	0452      	lsls	r2, r2, #17
 8002728:	430a      	orrs	r2, r1
 800272a:	4930      	ldr	r1, [pc, #192]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 800272c:	4313      	orrs	r3, r2
 800272e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2d      	ldr	r2, [pc, #180]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002748:	f7ff fb3a 	bl	8001dc0 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7ff fb36 	bl	8001dc0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e058      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276e:	e050      	b.n	8002812 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e04f      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d148      	bne.n	8002812 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002798:	f7ff fb12 	bl	8001dc0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff fb0e 	bl	8001dc0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e030      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x734>
 80027be:	e028      	b.n	8002812 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d023      	beq.n	800280e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a08      	ldr	r2, [pc, #32]	; (80027ec <HAL_RCC_OscConfig+0x780>)
 80027cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7ff faf5 	bl	8001dc0 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d8:	e00c      	b.n	80027f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027da:	f7ff faf1 	bl	8001dc0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d905      	bls.n	80027f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e013      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
 80027ec:	40021000 	.word	0x40021000
 80027f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x7b0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ec      	bne.n	80027da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_RCC_OscConfig+0x7b0>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4905      	ldr	r1, [pc, #20]	; (800281c <HAL_RCC_OscConfig+0x7b0>)
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_OscConfig+0x7b4>)
 8002808:	4013      	ands	r3, r2
 800280a:	60cb      	str	r3, [r1, #12]
 800280c:	e001      	b.n	8002812 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	feeefffc 	.word	0xfeeefffc

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0e7      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d910      	bls.n	8002868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b72      	ldr	r3, [pc, #456]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4970      	ldr	r1, [pc, #448]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cf      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002880:	429a      	cmp	r2, r3
 8002882:	d908      	bls.n	8002896 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4960      	ldr	r1, [pc, #384]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d04c      	beq.n	800293c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d121      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0a6      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d115      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e09a      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028da:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e08e      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e086      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4943      	ldr	r1, [pc, #268]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290c:	f7ff fa58 	bl	8001dc0 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7ff fa54 	bl	8001dc0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e06e      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d010      	beq.n	800296a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	429a      	cmp	r2, r3
 8002956:	d208      	bcs.n	800296a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	492b      	ldr	r1, [pc, #172]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d210      	bcs.n	800299a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 0207 	bic.w	r2, r3, #7
 8002980:	4923      	ldr	r1, [pc, #140]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e036      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4918      	ldr	r1, [pc, #96]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4910      	ldr	r1, [pc, #64]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d8:	f000 f824 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	490b      	ldr	r1, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x1f4>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
 80029f4:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1f8>)
 80029f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1fc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f98f 	bl	8001d20 <HAL_InitTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a06:	7afb      	ldrb	r3, [r7, #11]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08003fc8 	.word	0x08003fc8
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	20000008 	.word	0x20000008

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d121      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d11e      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a64:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e005      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a80:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e004      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d134      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0xa6>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ac8:	e005      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002acc:	617b      	str	r3, [r7, #20]
      break;
 8002ace:	e005      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ad2:	617b      	str	r3, [r7, #20]
      break;
 8002ad4:	e002      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	617b      	str	r3, [r7, #20]
      break;
 8002ada:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	fb03 f202 	mul.w	r2, r3, r2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	0e5b      	lsrs	r3, r3, #25
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	08003fd8 	.word	0x08003fd8
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	007a1200 	.word	0x007a1200

08002b3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b54:	f7ff fa26 	bl	8001fa4 <HAL_PWREx_GetVoltageRange>
 8002b58:	6178      	str	r0, [r7, #20]
 8002b5a:	e014      	b.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b74:	f7ff fa16 	bl	8001fa4 <HAL_PWREx_GetVoltageRange>
 8002b78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d10b      	bne.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d919      	bls.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2ba0      	cmp	r3, #160	; 0xa0
 8002b98:	d902      	bls.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	e013      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e010      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d902      	bls.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bac:	2303      	movs	r3, #3
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e00a      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d102      	bne.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb8:	2302      	movs	r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e004      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d101      	bne.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0207 	bic.w	r2, r3, #7
 8002bd0:	4909      	ldr	r1, [pc, #36]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40022000 	.word	0x40022000

08002bfc <arm_rfft_32_fast_init_f32>:
 8002bfc:	b178      	cbz	r0, 8002c1e <arm_rfft_32_fast_init_f32+0x22>
 8002bfe:	b430      	push	{r4, r5}
 8002c00:	4908      	ldr	r1, [pc, #32]	; (8002c24 <arm_rfft_32_fast_init_f32+0x28>)
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <arm_rfft_32_fast_init_f32+0x2c>)
 8002c04:	2310      	movs	r3, #16
 8002c06:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002c0a:	8003      	strh	r3, [r0, #0]
 8002c0c:	2520      	movs	r5, #32
 8002c0e:	2414      	movs	r4, #20
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <arm_rfft_32_fast_init_f32+0x30>)
 8002c12:	8205      	strh	r5, [r0, #16]
 8002c14:	8184      	strh	r4, [r0, #12]
 8002c16:	6143      	str	r3, [r0, #20]
 8002c18:	bc30      	pop	{r4, r5}
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	4770      	bx	lr
 8002c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c22:	4770      	bx	lr
 8002c24:	08004fb8 	.word	0x08004fb8
 8002c28:	080098f0 	.word	0x080098f0
 8002c2c:	08012670 	.word	0x08012670

08002c30 <arm_rfft_64_fast_init_f32>:
 8002c30:	b178      	cbz	r0, 8002c52 <arm_rfft_64_fast_init_f32+0x22>
 8002c32:	b430      	push	{r4, r5}
 8002c34:	4908      	ldr	r1, [pc, #32]	; (8002c58 <arm_rfft_64_fast_init_f32+0x28>)
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <arm_rfft_64_fast_init_f32+0x2c>)
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002c3e:	8003      	strh	r3, [r0, #0]
 8002c40:	2540      	movs	r5, #64	; 0x40
 8002c42:	2430      	movs	r4, #48	; 0x30
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <arm_rfft_64_fast_init_f32+0x30>)
 8002c46:	8205      	strh	r5, [r0, #16]
 8002c48:	8184      	strh	r4, [r0, #12]
 8002c4a:	6143      	str	r3, [r0, #20]
 8002c4c:	bc30      	pop	{r4, r5}
 8002c4e:	2000      	movs	r0, #0
 8002c50:	4770      	bx	lr
 8002c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c56:	4770      	bx	lr
 8002c58:	08007110 	.word	0x08007110
 8002c5c:	0800e170 	.word	0x0800e170
 8002c60:	08016ef0 	.word	0x08016ef0

08002c64 <arm_rfft_256_fast_init_f32>:
 8002c64:	b180      	cbz	r0, 8002c88 <arm_rfft_256_fast_init_f32+0x24>
 8002c66:	b430      	push	{r4, r5}
 8002c68:	4909      	ldr	r1, [pc, #36]	; (8002c90 <arm_rfft_256_fast_init_f32+0x2c>)
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <arm_rfft_256_fast_init_f32+0x30>)
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002c72:	8003      	strh	r3, [r0, #0]
 8002c74:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002c78:	24d0      	movs	r4, #208	; 0xd0
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <arm_rfft_256_fast_init_f32+0x34>)
 8002c7c:	8205      	strh	r5, [r0, #16]
 8002c7e:	8184      	strh	r4, [r0, #12]
 8002c80:	6143      	str	r3, [r0, #20]
 8002c82:	bc30      	pop	{r4, r5}
 8002c84:	2000      	movs	r0, #0
 8002c86:	4770      	bx	lr
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	08004e18 	.word	0x08004e18
 8002c94:	080094f0 	.word	0x080094f0
 8002c98:	08012270 	.word	0x08012270

08002c9c <arm_rfft_512_fast_init_f32>:
 8002c9c:	b190      	cbz	r0, 8002cc4 <arm_rfft_512_fast_init_f32+0x28>
 8002c9e:	b430      	push	{r4, r5}
 8002ca0:	490a      	ldr	r1, [pc, #40]	; (8002ccc <arm_rfft_512_fast_init_f32+0x30>)
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <arm_rfft_512_fast_init_f32+0x34>)
 8002ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002cac:	8003      	strh	r3, [r0, #0]
 8002cae:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002cb2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <arm_rfft_512_fast_init_f32+0x38>)
 8002cb8:	8205      	strh	r5, [r0, #16]
 8002cba:	8184      	strh	r4, [r0, #12]
 8002cbc:	6143      	str	r3, [r0, #20]
 8002cbe:	bc30      	pop	{r4, r5}
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	4770      	bx	lr
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	08006da0 	.word	0x08006da0
 8002cd0:	0800d970 	.word	0x0800d970
 8002cd4:	080166f0 	.word	0x080166f0

08002cd8 <arm_rfft_1024_fast_init_f32>:
 8002cd8:	b190      	cbz	r0, 8002d00 <arm_rfft_1024_fast_init_f32+0x28>
 8002cda:	b430      	push	{r4, r5}
 8002cdc:	490a      	ldr	r1, [pc, #40]	; (8002d08 <arm_rfft_1024_fast_init_f32+0x30>)
 8002cde:	4a0b      	ldr	r2, [pc, #44]	; (8002d0c <arm_rfft_1024_fast_init_f32+0x34>)
 8002ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002ce8:	8003      	strh	r3, [r0, #0]
 8002cea:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002cee:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <arm_rfft_1024_fast_init_f32+0x38>)
 8002cf4:	8205      	strh	r5, [r0, #16]
 8002cf6:	8184      	strh	r4, [r0, #12]
 8002cf8:	6143      	str	r3, [r0, #20]
 8002cfa:	bc30      	pop	{r4, r5}
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	4770      	bx	lr
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	08007170 	.word	0x08007170
 8002d0c:	0800e270 	.word	0x0800e270
 8002d10:	0800f270 	.word	0x0800f270

08002d14 <arm_rfft_2048_fast_init_f32>:
 8002d14:	b190      	cbz	r0, 8002d3c <arm_rfft_2048_fast_init_f32+0x28>
 8002d16:	b430      	push	{r4, r5}
 8002d18:	490a      	ldr	r1, [pc, #40]	; (8002d44 <arm_rfft_2048_fast_init_f32+0x30>)
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <arm_rfft_2048_fast_init_f32+0x34>)
 8002d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d20:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002d24:	8003      	strh	r3, [r0, #0]
 8002d26:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002d2a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <arm_rfft_2048_fast_init_f32+0x38>)
 8002d30:	8205      	strh	r5, [r0, #16]
 8002d32:	8184      	strh	r4, [r0, #12]
 8002d34:	6143      	str	r3, [r0, #20]
 8002d36:	bc30      	pop	{r4, r5}
 8002d38:	2000      	movs	r0, #0
 8002d3a:	4770      	bx	lr
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	08004008 	.word	0x08004008
 8002d48:	080074f0 	.word	0x080074f0
 8002d4c:	08010270 	.word	0x08010270

08002d50 <arm_rfft_4096_fast_init_f32>:
 8002d50:	b190      	cbz	r0, 8002d78 <arm_rfft_4096_fast_init_f32+0x28>
 8002d52:	b430      	push	{r4, r5}
 8002d54:	490a      	ldr	r1, [pc, #40]	; (8002d80 <arm_rfft_4096_fast_init_f32+0x30>)
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <arm_rfft_4096_fast_init_f32+0x34>)
 8002d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d5c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002d60:	8003      	strh	r3, [r0, #0]
 8002d62:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002d66:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <arm_rfft_4096_fast_init_f32+0x38>)
 8002d6c:	8205      	strh	r5, [r0, #16]
 8002d6e:	8184      	strh	r4, [r0, #12]
 8002d70:	6143      	str	r3, [r0, #20]
 8002d72:	bc30      	pop	{r4, r5}
 8002d74:	2000      	movs	r0, #0
 8002d76:	4770      	bx	lr
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	08004fe0 	.word	0x08004fe0
 8002d84:	08009970 	.word	0x08009970
 8002d88:	080126f0 	.word	0x080126f0

08002d8c <arm_rfft_fast_init_f32>:
 8002d8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002d90:	d01f      	beq.n	8002dd2 <arm_rfft_fast_init_f32+0x46>
 8002d92:	d90b      	bls.n	8002dac <arm_rfft_fast_init_f32+0x20>
 8002d94:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002d98:	d019      	beq.n	8002dce <arm_rfft_fast_init_f32+0x42>
 8002d9a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002d9e:	d012      	beq.n	8002dc6 <arm_rfft_fast_init_f32+0x3a>
 8002da0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002da4:	d00d      	beq.n	8002dc2 <arm_rfft_fast_init_f32+0x36>
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002daa:	4770      	bx	lr
 8002dac:	2940      	cmp	r1, #64	; 0x40
 8002dae:	d00c      	beq.n	8002dca <arm_rfft_fast_init_f32+0x3e>
 8002db0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002db4:	d003      	beq.n	8002dbe <arm_rfft_fast_init_f32+0x32>
 8002db6:	2920      	cmp	r1, #32
 8002db8:	d1f5      	bne.n	8002da6 <arm_rfft_fast_init_f32+0x1a>
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <arm_rfft_fast_init_f32+0x4c>)
 8002dbc:	4718      	bx	r3
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <arm_rfft_fast_init_f32+0x50>)
 8002dc0:	4718      	bx	r3
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <arm_rfft_fast_init_f32+0x54>)
 8002dc4:	4718      	bx	r3
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <arm_rfft_fast_init_f32+0x58>)
 8002dc8:	4718      	bx	r3
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <arm_rfft_fast_init_f32+0x5c>)
 8002dcc:	e7f6      	b.n	8002dbc <arm_rfft_fast_init_f32+0x30>
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <arm_rfft_fast_init_f32+0x60>)
 8002dd0:	e7f4      	b.n	8002dbc <arm_rfft_fast_init_f32+0x30>
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <arm_rfft_fast_init_f32+0x64>)
 8002dd4:	e7f2      	b.n	8002dbc <arm_rfft_fast_init_f32+0x30>
 8002dd6:	bf00      	nop
 8002dd8:	08002bfd 	.word	0x08002bfd
 8002ddc:	08002c65 	.word	0x08002c65
 8002de0:	08002cd9 	.word	0x08002cd9
 8002de4:	08002d51 	.word	0x08002d51
 8002de8:	08002c31 	.word	0x08002c31
 8002dec:	08002d15 	.word	0x08002d15
 8002df0:	08002c9d 	.word	0x08002c9d

08002df4 <stage_rfft_f32>:
 8002df4:	b410      	push	{r4}
 8002df6:	edd1 7a00 	vldr	s15, [r1]
 8002dfa:	ed91 7a01 	vldr	s14, [r1, #4]
 8002dfe:	8804      	ldrh	r4, [r0, #0]
 8002e00:	6940      	ldr	r0, [r0, #20]
 8002e02:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002e06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e0a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8002e0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e16:	3c01      	subs	r4, #1
 8002e18:	ee26 7a84 	vmul.f32	s14, s13, s8
 8002e1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8002e20:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8002e24:	ed82 7a00 	vstr	s14, [r2]
 8002e28:	edc2 7a01 	vstr	s15, [r2, #4]
 8002e2c:	3010      	adds	r0, #16
 8002e2e:	3210      	adds	r2, #16
 8002e30:	3b08      	subs	r3, #8
 8002e32:	3110      	adds	r1, #16
 8002e34:	ed11 5a02 	vldr	s10, [r1, #-8]
 8002e38:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e3c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8002e40:	edd3 4a03 	vldr	s9, [r3, #12]
 8002e44:	ed51 7a01 	vldr	s15, [r1, #-4]
 8002e48:	ed10 6a01 	vldr	s12, [r0, #-4]
 8002e4c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8002e50:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002e54:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8002e58:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8002e5c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8002e60:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8002e64:	ee37 7a23 	vadd.f32	s14, s14, s7
 8002e68:	ee66 6a85 	vmul.f32	s13, s13, s10
 8002e6c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8002e70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002e74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002e78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002e80:	ee67 7a84 	vmul.f32	s15, s15, s8
 8002e84:	3c01      	subs	r4, #1
 8002e86:	ed02 7a02 	vstr	s14, [r2, #-8]
 8002e8a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8002e8e:	f1a3 0308 	sub.w	r3, r3, #8
 8002e92:	f101 0108 	add.w	r1, r1, #8
 8002e96:	f100 0008 	add.w	r0, r0, #8
 8002e9a:	f102 0208 	add.w	r2, r2, #8
 8002e9e:	d1c9      	bne.n	8002e34 <stage_rfft_f32+0x40>
 8002ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop

08002ea8 <merge_rfft_f32>:
 8002ea8:	b410      	push	{r4}
 8002eaa:	edd1 7a00 	vldr	s15, [r1]
 8002eae:	edd1 6a01 	vldr	s13, [r1, #4]
 8002eb2:	8804      	ldrh	r4, [r0, #0]
 8002eb4:	6940      	ldr	r0, [r0, #20]
 8002eb6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002eba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ebe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8002ec2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002ec6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8002eca:	3c01      	subs	r4, #1
 8002ecc:	ed82 7a00 	vstr	s14, [r2]
 8002ed0:	edc2 7a01 	vstr	s15, [r2, #4]
 8002ed4:	b3dc      	cbz	r4, 8002f4e <merge_rfft_f32+0xa6>
 8002ed6:	00e3      	lsls	r3, r4, #3
 8002ed8:	3b08      	subs	r3, #8
 8002eda:	440b      	add	r3, r1
 8002edc:	3010      	adds	r0, #16
 8002ede:	3210      	adds	r2, #16
 8002ee0:	3110      	adds	r1, #16
 8002ee2:	ed11 5a02 	vldr	s10, [r1, #-8]
 8002ee6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002eea:	ed50 6a02 	vldr	s13, [r0, #-8]
 8002eee:	edd3 4a03 	vldr	s9, [r3, #12]
 8002ef2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8002ef6:	ed10 6a01 	vldr	s12, [r0, #-4]
 8002efa:	ee75 5a47 	vsub.f32	s11, s10, s14
 8002efe:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002f02:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8002f06:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8002f0a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8002f0e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8002f12:	ee37 7a63 	vsub.f32	s14, s14, s7
 8002f16:	ee66 6a85 	vmul.f32	s13, s13, s10
 8002f1a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8002f1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002f22:	ee37 7a46 	vsub.f32	s14, s14, s12
 8002f26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002f2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8002f32:	3c01      	subs	r4, #1
 8002f34:	ed02 7a02 	vstr	s14, [r2, #-8]
 8002f38:	ed42 7a01 	vstr	s15, [r2, #-4]
 8002f3c:	f1a3 0308 	sub.w	r3, r3, #8
 8002f40:	f101 0108 	add.w	r1, r1, #8
 8002f44:	f100 0008 	add.w	r0, r0, #8
 8002f48:	f102 0208 	add.w	r2, r2, #8
 8002f4c:	d1c9      	bne.n	8002ee2 <merge_rfft_f32+0x3a>
 8002f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <arm_rfft_fast_f32>:
 8002f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f58:	8a05      	ldrh	r5, [r0, #16]
 8002f5a:	086d      	lsrs	r5, r5, #1
 8002f5c:	8005      	strh	r5, [r0, #0]
 8002f5e:	4604      	mov	r4, r0
 8002f60:	4616      	mov	r6, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	b14b      	cbz	r3, 8002f7a <arm_rfft_fast_f32+0x26>
 8002f66:	f7ff ff9f 	bl	8002ea8 <merge_rfft_f32>
 8002f6a:	462a      	mov	r2, r5
 8002f6c:	4631      	mov	r1, r6
 8002f6e:	4620      	mov	r0, r4
 8002f70:	2301      	movs	r3, #1
 8002f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f76:	f000 bb33 	b.w	80035e0 <arm_cfft_f32>
 8002f7a:	460f      	mov	r7, r1
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f000 fb2e 	bl	80035e0 <arm_cfft_f32>
 8002f84:	4632      	mov	r2, r6
 8002f86:	4639      	mov	r1, r7
 8002f88:	4620      	mov	r0, r4
 8002f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8e:	f7ff bf31 	b.w	8002df4 <stage_rfft_f32>
 8002f92:	bf00      	nop

08002f94 <arm_cfft_radix8by2_f32>:
 8002f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f98:	ed2d 8b08 	vpush	{d8-d11}
 8002f9c:	4607      	mov	r7, r0
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	f8b7 c000 	ldrh.w	ip, [r7]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8002faa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8002fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002fb2:	f000 80b0 	beq.w	8003116 <arm_cfft_radix8by2_f32+0x182>
 8002fb6:	008c      	lsls	r4, r1, #2
 8002fb8:	3410      	adds	r4, #16
 8002fba:	f100 0310 	add.w	r3, r0, #16
 8002fbe:	1906      	adds	r6, r0, r4
 8002fc0:	3210      	adds	r2, #16
 8002fc2:	4444      	add	r4, r8
 8002fc4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8002fc8:	f108 0510 	add.w	r5, r8, #16
 8002fcc:	ed15 2a04 	vldr	s4, [r5, #-16]
 8002fd0:	ed55 2a03 	vldr	s5, [r5, #-12]
 8002fd4:	ed54 4a04 	vldr	s9, [r4, #-16]
 8002fd8:	ed14 4a03 	vldr	s8, [r4, #-12]
 8002fdc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8002fe0:	ed54 5a01 	vldr	s11, [r4, #-4]
 8002fe4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8002fe8:	ed15 0a02 	vldr	s0, [r5, #-8]
 8002fec:	ed55 0a01 	vldr	s1, [r5, #-4]
 8002ff0:	ed56 6a04 	vldr	s13, [r6, #-16]
 8002ff4:	ed16 3a03 	vldr	s6, [r6, #-12]
 8002ff8:	ed13 7a03 	vldr	s14, [r3, #-12]
 8002ffc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003000:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003004:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003008:	ed56 1a01 	vldr	s3, [r6, #-4]
 800300c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003010:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003014:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003018:	ee33 9a04 	vadd.f32	s18, s6, s8
 800301c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003020:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003024:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003028:	ee71 8a06 	vadd.f32	s17, s2, s12
 800302c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003030:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003034:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003038:	ed03 aa01 	vstr	s20, [r3, #-4]
 800303c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003040:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003044:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003048:	ed46 8a02 	vstr	s17, [r6, #-8]
 800304c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003050:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003054:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003058:	ed52 6a03 	vldr	s13, [r2, #-12]
 800305c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003060:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003064:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003068:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800306c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003070:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003074:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003078:	ee27 7a03 	vmul.f32	s14, s14, s6
 800307c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003080:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003084:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003088:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800308c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003090:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003094:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003098:	ed05 3a04 	vstr	s6, [r5, #-16]
 800309c:	ed04 4a04 	vstr	s8, [r4, #-16]
 80030a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80030a4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80030a8:	ee76 6a41 	vsub.f32	s13, s12, s2
 80030ac:	ee35 5a40 	vsub.f32	s10, s10, s0
 80030b0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80030b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80030b8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80030bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80030c0:	ee66 4a87 	vmul.f32	s9, s13, s14
 80030c4:	ee25 4a25 	vmul.f32	s8, s10, s11
 80030c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80030cc:	ee25 5a07 	vmul.f32	s10, s10, s14
 80030d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80030d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80030d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80030dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80030e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80030e4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80030e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80030ec:	3310      	adds	r3, #16
 80030ee:	4563      	cmp	r3, ip
 80030f0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80030f4:	f106 0610 	add.w	r6, r6, #16
 80030f8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80030fc:	f102 0210 	add.w	r2, r2, #16
 8003100:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003104:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003108:	f105 0510 	add.w	r5, r5, #16
 800310c:	f104 0410 	add.w	r4, r4, #16
 8003110:	f47f af5c 	bne.w	8002fcc <arm_cfft_radix8by2_f32+0x38>
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	b28c      	uxth	r4, r1
 8003118:	4621      	mov	r1, r4
 800311a:	2302      	movs	r3, #2
 800311c:	f000 faf8 	bl	8003710 <arm_radix8_butterfly_f32>
 8003120:	ecbd 8b08 	vpop	{d8-d11}
 8003124:	4621      	mov	r1, r4
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4640      	mov	r0, r8
 800312a:	2302      	movs	r3, #2
 800312c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003130:	f000 baee 	b.w	8003710 <arm_radix8_butterfly_f32>

08003134 <arm_cfft_radix8by4_f32>:
 8003134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003138:	ed2d 8b0a 	vpush	{d8-d12}
 800313c:	b08d      	sub	sp, #52	; 0x34
 800313e:	460d      	mov	r5, r1
 8003140:	910b      	str	r1, [sp, #44]	; 0x2c
 8003142:	8801      	ldrh	r1, [r0, #0]
 8003144:	6842      	ldr	r2, [r0, #4]
 8003146:	900a      	str	r0, [sp, #40]	; 0x28
 8003148:	0849      	lsrs	r1, r1, #1
 800314a:	008b      	lsls	r3, r1, #2
 800314c:	18ee      	adds	r6, r5, r3
 800314e:	18f0      	adds	r0, r6, r3
 8003150:	edd0 5a00 	vldr	s11, [r0]
 8003154:	edd5 7a00 	vldr	s15, [r5]
 8003158:	ed96 7a00 	vldr	s14, [r6]
 800315c:	edd0 3a01 	vldr	s7, [r0, #4]
 8003160:	ed96 4a01 	vldr	s8, [r6, #4]
 8003164:	ed95 5a01 	vldr	s10, [r5, #4]
 8003168:	9008      	str	r0, [sp, #32]
 800316a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800316e:	18c7      	adds	r7, r0, r3
 8003170:	edd7 4a00 	vldr	s9, [r7]
 8003174:	ed97 3a01 	vldr	s6, [r7, #4]
 8003178:	9701      	str	r7, [sp, #4]
 800317a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800317e:	462c      	mov	r4, r5
 8003180:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003184:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003188:	ee16 ca90 	vmov	ip, s13
 800318c:	f844 cb08 	str.w	ip, [r4], #8
 8003190:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003194:	edd6 5a01 	vldr	s11, [r6, #4]
 8003198:	edd7 2a01 	vldr	s5, [r7, #4]
 800319c:	9404      	str	r4, [sp, #16]
 800319e:	ee35 5a63 	vsub.f32	s10, s10, s7
 80031a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 80031a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80031aa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80031ae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80031b2:	0849      	lsrs	r1, r1, #1
 80031b4:	f102 0e08 	add.w	lr, r2, #8
 80031b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80031bc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80031c0:	9109      	str	r1, [sp, #36]	; 0x24
 80031c2:	ee35 4a47 	vsub.f32	s8, s10, s14
 80031c6:	f1a1 0902 	sub.w	r9, r1, #2
 80031ca:	f8cd e00c 	str.w	lr, [sp, #12]
 80031ce:	4631      	mov	r1, r6
 80031d0:	ee13 ea90 	vmov	lr, s7
 80031d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80031d8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80031dc:	4604      	mov	r4, r0
 80031de:	edc5 5a01 	vstr	s11, [r5, #4]
 80031e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80031e6:	f841 eb08 	str.w	lr, [r1], #8
 80031ea:	ee34 5a24 	vadd.f32	s10, s8, s9
 80031ee:	ee16 ea10 	vmov	lr, s12
 80031f2:	ed86 5a01 	vstr	s10, [r6, #4]
 80031f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80031fa:	f844 eb08 	str.w	lr, [r4], #8
 80031fe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003202:	edc0 6a01 	vstr	s13, [r0, #4]
 8003206:	9405      	str	r4, [sp, #20]
 8003208:	4604      	mov	r4, r0
 800320a:	ee17 0a90 	vmov	r0, s15
 800320e:	9106      	str	r1, [sp, #24]
 8003210:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003214:	f102 0110 	add.w	r1, r2, #16
 8003218:	46bc      	mov	ip, r7
 800321a:	9100      	str	r1, [sp, #0]
 800321c:	f847 0b08 	str.w	r0, [r7], #8
 8003220:	f102 0118 	add.w	r1, r2, #24
 8003224:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8003228:	9102      	str	r1, [sp, #8]
 800322a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800322e:	9007      	str	r0, [sp, #28]
 8003230:	f000 8134 	beq.w	800349c <arm_cfft_radix8by4_f32+0x368>
 8003234:	f102 0920 	add.w	r9, r2, #32
 8003238:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800323c:	9a01      	ldr	r2, [sp, #4]
 800323e:	f8dd a000 	ldr.w	sl, [sp]
 8003242:	3b0c      	subs	r3, #12
 8003244:	4683      	mov	fp, r0
 8003246:	4463      	add	r3, ip
 8003248:	f105 0e10 	add.w	lr, r5, #16
 800324c:	f1a4 010c 	sub.w	r1, r4, #12
 8003250:	f104 0510 	add.w	r5, r4, #16
 8003254:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003258:	f1a2 040c 	sub.w	r4, r2, #12
 800325c:	f106 0010 	add.w	r0, r6, #16
 8003260:	3210      	adds	r2, #16
 8003262:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003266:	ed55 5a02 	vldr	s11, [r5, #-8]
 800326a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800326e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003272:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003276:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800327a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800327e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8003282:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003286:	ee30 6a26 	vadd.f32	s12, s0, s13
 800328a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800328e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003292:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003296:	ee75 5a65 	vsub.f32	s11, s10, s11
 800329a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800329e:	ed10 7a01 	vldr	s14, [r0, #-4]
 80032a2:	ed52 6a01 	vldr	s13, [r2, #-4]
 80032a6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80032aa:	ee78 aa25 	vadd.f32	s21, s16, s11
 80032ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80032b2:	ee70 3a67 	vsub.f32	s7, s0, s15
 80032b6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80032ba:	ed94 7a02 	vldr	s14, [r4, #8]
 80032be:	ed9c 2a02 	vldr	s4, [ip, #8]
 80032c2:	ed91 ba02 	vldr	s22, [r1, #8]
 80032c6:	edd3 9a02 	vldr	s19, [r3, #8]
 80032ca:	edd4 2a01 	vldr	s5, [r4, #4]
 80032ce:	ed9c 9a01 	vldr	s18, [ip, #4]
 80032d2:	ed93 5a01 	vldr	s10, [r3, #4]
 80032d6:	edd1 0a01 	vldr	s1, [r1, #4]
 80032da:	ee72 6a07 	vadd.f32	s13, s4, s14
 80032de:	ee32 2a47 	vsub.f32	s4, s4, s14
 80032e2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80032e6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80032ea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80032ee:	ee79 2a62 	vsub.f32	s5, s18, s5
 80032f2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80032f6:	ed91 7a01 	vldr	s14, [r1, #4]
 80032fa:	edd3 8a01 	vldr	s17, [r3, #4]
 80032fe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003302:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003306:	ee37 7a28 	vadd.f32	s14, s14, s17
 800330a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800330e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003312:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8003316:	ed1a aa02 	vldr	s20, [sl, #-8]
 800331a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800331e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003322:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003326:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800332a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800332e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003332:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003336:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800333a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800333e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003342:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003346:	ee68 8a87 	vmul.f32	s17, s17, s14
 800334a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800334e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003352:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003356:	ee3b aaca 	vsub.f32	s20, s23, s20
 800335a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800335e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003362:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003366:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800336a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800336e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8003372:	edc1 8a01 	vstr	s17, [r1, #4]
 8003376:	ed81 aa02 	vstr	s20, [r1, #8]
 800337a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800337e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8003382:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003386:	ed59 6a03 	vldr	s13, [r9, #-12]
 800338a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800338e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8003392:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003396:	ee66 9a26 	vmul.f32	s19, s12, s13
 800339a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800339e:	ee26 6a23 	vmul.f32	s12, s12, s7
 80033a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 80033a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80033aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80033ae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80033b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80033b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80033ba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80033be:	ee79 3a29 	vadd.f32	s7, s18, s19
 80033c2:	ee75 6a60 	vsub.f32	s13, s10, s1
 80033c6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80033ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80033ce:	ed45 3a02 	vstr	s7, [r5, #-8]
 80033d2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80033d6:	ed84 7a01 	vstr	s14, [r4, #4]
 80033da:	ed84 4a02 	vstr	s8, [r4, #8]
 80033de:	ee35 6a81 	vadd.f32	s12, s11, s2
 80033e2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80033e6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80033ea:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80033ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 80033f2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80033f6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80033fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80033fe:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003402:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003406:	ee26 6a26 	vmul.f32	s12, s12, s13
 800340a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800340e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003412:	ee23 3a25 	vmul.f32	s6, s6, s11
 8003416:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800341a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800341e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003422:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003426:	f1bb 0b01 	subs.w	fp, fp, #1
 800342a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800342e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003432:	f10e 0e08 	add.w	lr, lr, #8
 8003436:	ed83 3a02 	vstr	s6, [r3, #8]
 800343a:	ed83 7a01 	vstr	s14, [r3, #4]
 800343e:	f1ac 0c08 	sub.w	ip, ip, #8
 8003442:	f10a 0a08 	add.w	sl, sl, #8
 8003446:	f100 0008 	add.w	r0, r0, #8
 800344a:	f1a1 0108 	sub.w	r1, r1, #8
 800344e:	f109 0910 	add.w	r9, r9, #16
 8003452:	f105 0508 	add.w	r5, r5, #8
 8003456:	f1a4 0408 	sub.w	r4, r4, #8
 800345a:	f108 0818 	add.w	r8, r8, #24
 800345e:	f102 0208 	add.w	r2, r2, #8
 8003462:	f1a3 0308 	sub.w	r3, r3, #8
 8003466:	f47f aefc 	bne.w	8003262 <arm_cfft_radix8by4_f32+0x12e>
 800346a:	9907      	ldr	r1, [sp, #28]
 800346c:	9800      	ldr	r0, [sp, #0]
 800346e:	00cb      	lsls	r3, r1, #3
 8003470:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003474:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003478:	9100      	str	r1, [sp, #0]
 800347a:	9904      	ldr	r1, [sp, #16]
 800347c:	4419      	add	r1, r3
 800347e:	9104      	str	r1, [sp, #16]
 8003480:	9903      	ldr	r1, [sp, #12]
 8003482:	4419      	add	r1, r3
 8003484:	9103      	str	r1, [sp, #12]
 8003486:	9906      	ldr	r1, [sp, #24]
 8003488:	4419      	add	r1, r3
 800348a:	9106      	str	r1, [sp, #24]
 800348c:	9905      	ldr	r1, [sp, #20]
 800348e:	441f      	add	r7, r3
 8003490:	4419      	add	r1, r3
 8003492:	9b02      	ldr	r3, [sp, #8]
 8003494:	9105      	str	r1, [sp, #20]
 8003496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	9904      	ldr	r1, [sp, #16]
 800349e:	9805      	ldr	r0, [sp, #20]
 80034a0:	ed91 4a00 	vldr	s8, [r1]
 80034a4:	edd0 6a00 	vldr	s13, [r0]
 80034a8:	9b06      	ldr	r3, [sp, #24]
 80034aa:	ed97 3a00 	vldr	s6, [r7]
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	edd0 4a01 	vldr	s9, [r0, #4]
 80034b6:	edd1 3a01 	vldr	s7, [r1, #4]
 80034ba:	ed97 2a01 	vldr	s4, [r7, #4]
 80034be:	ed93 7a01 	vldr	s14, [r3, #4]
 80034c2:	9a03      	ldr	r2, [sp, #12]
 80034c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80034c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 80034cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80034d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80034d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80034d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80034dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 80034e0:	ed81 5a00 	vstr	s10, [r1]
 80034e4:	ed93 5a01 	vldr	s10, [r3, #4]
 80034e8:	edd7 4a01 	vldr	s9, [r7, #4]
 80034ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 80034f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80034f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80034f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80034fc:	ed81 5a01 	vstr	s10, [r1, #4]
 8003500:	edd2 1a00 	vldr	s3, [r2]
 8003504:	edd2 2a01 	vldr	s5, [r2, #4]
 8003508:	ee34 5a83 	vadd.f32	s10, s9, s6
 800350c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003510:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003514:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003518:	ee24 4a22 	vmul.f32	s8, s8, s5
 800351c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003520:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003524:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003528:	ee35 5a44 	vsub.f32	s10, s10, s8
 800352c:	edc3 2a00 	vstr	s5, [r3]
 8003530:	ed83 5a01 	vstr	s10, [r3, #4]
 8003534:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8003538:	9b00      	ldr	r3, [sp, #0]
 800353a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800353e:	ed93 4a01 	vldr	s8, [r3, #4]
 8003542:	ed93 5a00 	vldr	s10, [r3]
 8003546:	9b02      	ldr	r3, [sp, #8]
 8003548:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800354c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8003550:	ee25 5a85 	vmul.f32	s10, s11, s10
 8003554:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003558:	ee65 5a84 	vmul.f32	s11, s11, s8
 800355c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003560:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8003564:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8003568:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800356c:	ed80 6a01 	vstr	s12, [r0, #4]
 8003570:	edc0 5a00 	vstr	s11, [r0]
 8003574:	edd3 5a01 	vldr	s11, [r3, #4]
 8003578:	edd3 6a00 	vldr	s13, [r3]
 800357c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003580:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8003584:	ee27 6a26 	vmul.f32	s12, s14, s13
 8003588:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800358c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003590:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003594:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003598:	ee76 7a27 	vadd.f32	s15, s12, s15
 800359c:	ed87 7a01 	vstr	s14, [r7, #4]
 80035a0:	edc7 7a00 	vstr	s15, [r7]
 80035a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80035a8:	4621      	mov	r1, r4
 80035aa:	686a      	ldr	r2, [r5, #4]
 80035ac:	2304      	movs	r3, #4
 80035ae:	f000 f8af 	bl	8003710 <arm_radix8_butterfly_f32>
 80035b2:	4630      	mov	r0, r6
 80035b4:	4621      	mov	r1, r4
 80035b6:	686a      	ldr	r2, [r5, #4]
 80035b8:	2304      	movs	r3, #4
 80035ba:	f000 f8a9 	bl	8003710 <arm_radix8_butterfly_f32>
 80035be:	9808      	ldr	r0, [sp, #32]
 80035c0:	686a      	ldr	r2, [r5, #4]
 80035c2:	4621      	mov	r1, r4
 80035c4:	2304      	movs	r3, #4
 80035c6:	f000 f8a3 	bl	8003710 <arm_radix8_butterfly_f32>
 80035ca:	686a      	ldr	r2, [r5, #4]
 80035cc:	9801      	ldr	r0, [sp, #4]
 80035ce:	4621      	mov	r1, r4
 80035d0:	2304      	movs	r3, #4
 80035d2:	b00d      	add	sp, #52	; 0x34
 80035d4:	ecbd 8b0a 	vpop	{d8-d12}
 80035d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035dc:	f000 b898 	b.w	8003710 <arm_radix8_butterfly_f32>

080035e0 <arm_cfft_f32>:
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	2a01      	cmp	r2, #1
 80035e6:	4606      	mov	r6, r0
 80035e8:	4617      	mov	r7, r2
 80035ea:	460c      	mov	r4, r1
 80035ec:	4698      	mov	r8, r3
 80035ee:	8805      	ldrh	r5, [r0, #0]
 80035f0:	d056      	beq.n	80036a0 <arm_cfft_f32+0xc0>
 80035f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80035f6:	d063      	beq.n	80036c0 <arm_cfft_f32+0xe0>
 80035f8:	d916      	bls.n	8003628 <arm_cfft_f32+0x48>
 80035fa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80035fe:	d01a      	beq.n	8003636 <arm_cfft_f32+0x56>
 8003600:	d947      	bls.n	8003692 <arm_cfft_f32+0xb2>
 8003602:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003606:	d05b      	beq.n	80036c0 <arm_cfft_f32+0xe0>
 8003608:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800360c:	d105      	bne.n	800361a <arm_cfft_f32+0x3a>
 800360e:	2301      	movs	r3, #1
 8003610:	6872      	ldr	r2, [r6, #4]
 8003612:	4629      	mov	r1, r5
 8003614:	4620      	mov	r0, r4
 8003616:	f000 f87b 	bl	8003710 <arm_radix8_butterfly_f32>
 800361a:	f1b8 0f00 	cmp.w	r8, #0
 800361e:	d111      	bne.n	8003644 <arm_cfft_f32+0x64>
 8003620:	2f01      	cmp	r7, #1
 8003622:	d016      	beq.n	8003652 <arm_cfft_f32+0x72>
 8003624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003628:	2d20      	cmp	r5, #32
 800362a:	d049      	beq.n	80036c0 <arm_cfft_f32+0xe0>
 800362c:	d935      	bls.n	800369a <arm_cfft_f32+0xba>
 800362e:	2d40      	cmp	r5, #64	; 0x40
 8003630:	d0ed      	beq.n	800360e <arm_cfft_f32+0x2e>
 8003632:	2d80      	cmp	r5, #128	; 0x80
 8003634:	d1f1      	bne.n	800361a <arm_cfft_f32+0x3a>
 8003636:	4621      	mov	r1, r4
 8003638:	4630      	mov	r0, r6
 800363a:	f7ff fcab 	bl	8002f94 <arm_cfft_radix8by2_f32>
 800363e:	f1b8 0f00 	cmp.w	r8, #0
 8003642:	d0ed      	beq.n	8003620 <arm_cfft_f32+0x40>
 8003644:	68b2      	ldr	r2, [r6, #8]
 8003646:	89b1      	ldrh	r1, [r6, #12]
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f841 	bl	80036d0 <arm_bitreversal_32>
 800364e:	2f01      	cmp	r7, #1
 8003650:	d1e8      	bne.n	8003624 <arm_cfft_f32+0x44>
 8003652:	ee07 5a90 	vmov	s15, r5
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800365e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003662:	2d00      	cmp	r5, #0
 8003664:	d0de      	beq.n	8003624 <arm_cfft_f32+0x44>
 8003666:	f104 0108 	add.w	r1, r4, #8
 800366a:	2300      	movs	r3, #0
 800366c:	3301      	adds	r3, #1
 800366e:	429d      	cmp	r5, r3
 8003670:	f101 0108 	add.w	r1, r1, #8
 8003674:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003678:	ed51 7a03 	vldr	s15, [r1, #-12]
 800367c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003680:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003684:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003688:	ed41 7a03 	vstr	s15, [r1, #-12]
 800368c:	d1ee      	bne.n	800366c <arm_cfft_f32+0x8c>
 800368e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003692:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003696:	d0ba      	beq.n	800360e <arm_cfft_f32+0x2e>
 8003698:	e7bf      	b.n	800361a <arm_cfft_f32+0x3a>
 800369a:	2d10      	cmp	r5, #16
 800369c:	d0cb      	beq.n	8003636 <arm_cfft_f32+0x56>
 800369e:	e7bc      	b.n	800361a <arm_cfft_f32+0x3a>
 80036a0:	b19d      	cbz	r5, 80036ca <arm_cfft_f32+0xea>
 80036a2:	f101 030c 	add.w	r3, r1, #12
 80036a6:	2200      	movs	r2, #0
 80036a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80036ac:	3201      	adds	r2, #1
 80036ae:	eef1 7a67 	vneg.f32	s15, s15
 80036b2:	4295      	cmp	r5, r2
 80036b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80036b8:	f103 0308 	add.w	r3, r3, #8
 80036bc:	d1f4      	bne.n	80036a8 <arm_cfft_f32+0xc8>
 80036be:	e798      	b.n	80035f2 <arm_cfft_f32+0x12>
 80036c0:	4621      	mov	r1, r4
 80036c2:	4630      	mov	r0, r6
 80036c4:	f7ff fd36 	bl	8003134 <arm_cfft_radix8by4_f32>
 80036c8:	e7a7      	b.n	800361a <arm_cfft_f32+0x3a>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0aa      	beq.n	8003624 <arm_cfft_f32+0x44>
 80036ce:	e7b9      	b.n	8003644 <arm_cfft_f32+0x64>

080036d0 <arm_bitreversal_32>:
 80036d0:	b1e9      	cbz	r1, 800370e <arm_bitreversal_32+0x3e>
 80036d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d4:	2500      	movs	r5, #0
 80036d6:	f102 0e02 	add.w	lr, r2, #2
 80036da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80036de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80036e2:	08a4      	lsrs	r4, r4, #2
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80036ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80036ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80036f2:	00a6      	lsls	r6, r4, #2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80036fa:	3304      	adds	r3, #4
 80036fc:	1d34      	adds	r4, r6, #4
 80036fe:	3502      	adds	r5, #2
 8003700:	58c6      	ldr	r6, [r0, r3]
 8003702:	5907      	ldr	r7, [r0, r4]
 8003704:	50c7      	str	r7, [r0, r3]
 8003706:	428d      	cmp	r5, r1
 8003708:	5106      	str	r6, [r0, r4]
 800370a:	d3e6      	bcc.n	80036da <arm_bitreversal_32+0xa>
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370e:	4770      	bx	lr

08003710 <arm_radix8_butterfly_f32>:
 8003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003714:	ed2d 8b10 	vpush	{d8-d15}
 8003718:	b095      	sub	sp, #84	; 0x54
 800371a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800371e:	4603      	mov	r3, r0
 8003720:	3304      	adds	r3, #4
 8003722:	ed9f bab9 	vldr	s22, [pc, #740]	; 8003a08 <arm_radix8_butterfly_f32+0x2f8>
 8003726:	9012      	str	r0, [sp, #72]	; 0x48
 8003728:	468b      	mov	fp, r1
 800372a:	9313      	str	r3, [sp, #76]	; 0x4c
 800372c:	4689      	mov	r9, r1
 800372e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8003732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003734:	960f      	str	r6, [sp, #60]	; 0x3c
 8003736:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800373a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800373e:	eb03 0508 	add.w	r5, r3, r8
 8003742:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8003746:	eb05 040e 	add.w	r4, r5, lr
 800374a:	0137      	lsls	r7, r6, #4
 800374c:	eba6 030a 	sub.w	r3, r6, sl
 8003750:	eb04 000e 	add.w	r0, r4, lr
 8003754:	44b2      	add	sl, r6
 8003756:	1d3a      	adds	r2, r7, #4
 8003758:	9702      	str	r7, [sp, #8]
 800375a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800375e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8003762:	ebae 0c06 	sub.w	ip, lr, r6
 8003766:	9703      	str	r7, [sp, #12]
 8003768:	eb03 0708 	add.w	r7, r3, r8
 800376c:	9701      	str	r7, [sp, #4]
 800376e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8003772:	9706      	str	r7, [sp, #24]
 8003774:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8003776:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800377a:	f10e 0104 	add.w	r1, lr, #4
 800377e:	4439      	add	r1, r7
 8003780:	443a      	add	r2, r7
 8003782:	0137      	lsls	r7, r6, #4
 8003784:	00f6      	lsls	r6, r6, #3
 8003786:	9704      	str	r7, [sp, #16]
 8003788:	9605      	str	r6, [sp, #20]
 800378a:	9f01      	ldr	r7, [sp, #4]
 800378c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800378e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8003792:	f04f 0c00 	mov.w	ip, #0
 8003796:	edd4 6a00 	vldr	s13, [r4]
 800379a:	edd7 1a00 	vldr	s3, [r7]
 800379e:	ed16 aa01 	vldr	s20, [r6, #-4]
 80037a2:	edd5 5a00 	vldr	s11, [r5]
 80037a6:	ed52 9a01 	vldr	s19, [r2, #-4]
 80037aa:	ed90 6a00 	vldr	s12, [r0]
 80037ae:	ed51 7a01 	vldr	s15, [r1, #-4]
 80037b2:	ed93 3a00 	vldr	s6, [r3]
 80037b6:	ee39 0a86 	vadd.f32	s0, s19, s12
 80037ba:	ee33 2a21 	vadd.f32	s4, s6, s3
 80037be:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80037c2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80037c6:	ee35 7a02 	vadd.f32	s14, s10, s4
 80037ca:	ee34 4a80 	vadd.f32	s8, s9, s0
 80037ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80037d2:	ee74 6a07 	vadd.f32	s13, s8, s14
 80037d6:	ee34 4a47 	vsub.f32	s8, s8, s14
 80037da:	ed46 6a01 	vstr	s13, [r6, #-4]
 80037de:	ed85 4a00 	vstr	s8, [r5]
 80037e2:	edd1 6a00 	vldr	s13, [r1]
 80037e6:	ed94 9a01 	vldr	s18, [r4, #4]
 80037ea:	edd3 2a01 	vldr	s5, [r3, #4]
 80037ee:	edd7 8a01 	vldr	s17, [r7, #4]
 80037f2:	edd6 0a00 	vldr	s1, [r6]
 80037f6:	edd5 3a01 	vldr	s7, [r5, #4]
 80037fa:	ed90 8a01 	vldr	s16, [r0, #4]
 80037fe:	ed92 7a00 	vldr	s14, [r2]
 8003802:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003806:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800380a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800380e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8003812:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8003816:	ee77 7a83 	vadd.f32	s15, s15, s6
 800381a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800381e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8003822:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8003826:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800382a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800382e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8003832:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8003836:	ee37 7a48 	vsub.f32	s14, s14, s16
 800383a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800383e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8003842:	ee76 6a89 	vadd.f32	s13, s13, s18
 8003846:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800384a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800384e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003852:	ee35 5a42 	vsub.f32	s10, s10, s4
 8003856:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800385a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800385e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003862:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003866:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800386a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800386e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8003872:	ee37 7a41 	vsub.f32	s14, s14, s2
 8003876:	ee73 1a84 	vadd.f32	s3, s7, s8
 800387a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800387e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8003882:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003886:	ee32 8a00 	vadd.f32	s16, s4, s0
 800388a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800388e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8003892:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003896:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800389a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800389e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80038a2:	ee34 6a67 	vsub.f32	s12, s8, s15
 80038a6:	ee75 4a87 	vadd.f32	s9, s11, s14
 80038aa:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80038ae:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80038b2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80038b6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80038ba:	44dc      	add	ip, fp
 80038bc:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80038c0:	45e1      	cmp	r9, ip
 80038c2:	ed86 8a00 	vstr	s16, [r6]
 80038c6:	ed85 2a01 	vstr	s4, [r5, #4]
 80038ca:	4456      	add	r6, sl
 80038cc:	ed02 0a01 	vstr	s0, [r2, #-4]
 80038d0:	4455      	add	r5, sl
 80038d2:	edc0 6a00 	vstr	s13, [r0]
 80038d6:	ed82 1a00 	vstr	s2, [r2]
 80038da:	ed80 5a01 	vstr	s10, [r0, #4]
 80038de:	4452      	add	r2, sl
 80038e0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80038e4:	4450      	add	r0, sl
 80038e6:	edc7 2a00 	vstr	s5, [r7]
 80038ea:	edc4 4a00 	vstr	s9, [r4]
 80038ee:	ed83 7a00 	vstr	s14, [r3]
 80038f2:	edc1 5a00 	vstr	s11, [r1]
 80038f6:	edc7 3a01 	vstr	s7, [r7, #4]
 80038fa:	4451      	add	r1, sl
 80038fc:	ed84 6a01 	vstr	s12, [r4, #4]
 8003900:	4457      	add	r7, sl
 8003902:	edc3 7a01 	vstr	s15, [r3, #4]
 8003906:	4454      	add	r4, sl
 8003908:	4453      	add	r3, sl
 800390a:	f63f af44 	bhi.w	8003796 <arm_radix8_butterfly_f32+0x86>
 800390e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003910:	2b07      	cmp	r3, #7
 8003912:	f240 81b7 	bls.w	8003c84 <arm_radix8_butterfly_f32+0x574>
 8003916:	9b06      	ldr	r3, [sp, #24]
 8003918:	9903      	ldr	r1, [sp, #12]
 800391a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800391c:	9e05      	ldr	r6, [sp, #20]
 800391e:	9a04      	ldr	r2, [sp, #16]
 8003920:	f103 0c08 	add.w	ip, r3, #8
 8003924:	9b02      	ldr	r3, [sp, #8]
 8003926:	3108      	adds	r1, #8
 8003928:	f108 0808 	add.w	r8, r8, #8
 800392c:	1841      	adds	r1, r0, r1
 800392e:	3608      	adds	r6, #8
 8003930:	330c      	adds	r3, #12
 8003932:	4604      	mov	r4, r0
 8003934:	4444      	add	r4, r8
 8003936:	18c3      	adds	r3, r0, r3
 8003938:	9109      	str	r1, [sp, #36]	; 0x24
 800393a:	1981      	adds	r1, r0, r6
 800393c:	f10e 0e08 	add.w	lr, lr, #8
 8003940:	3208      	adds	r2, #8
 8003942:	940b      	str	r4, [sp, #44]	; 0x2c
 8003944:	9107      	str	r1, [sp, #28]
 8003946:	4604      	mov	r4, r0
 8003948:	4601      	mov	r1, r0
 800394a:	9304      	str	r3, [sp, #16]
 800394c:	f100 030c 	add.w	r3, r0, #12
 8003950:	4474      	add	r4, lr
 8003952:	f04f 0801 	mov.w	r8, #1
 8003956:	1882      	adds	r2, r0, r2
 8003958:	4461      	add	r1, ip
 800395a:	9305      	str	r3, [sp, #20]
 800395c:	464b      	mov	r3, r9
 800395e:	940a      	str	r4, [sp, #40]	; 0x28
 8003960:	46c1      	mov	r9, r8
 8003962:	9208      	str	r2, [sp, #32]
 8003964:	46d8      	mov	r8, fp
 8003966:	9106      	str	r1, [sp, #24]
 8003968:	f04f 0e00 	mov.w	lr, #0
 800396c:	469b      	mov	fp, r3
 800396e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003970:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003972:	449e      	add	lr, r3
 8003974:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8003978:	441a      	add	r2, r3
 800397a:	920e      	str	r2, [sp, #56]	; 0x38
 800397c:	441a      	add	r2, r3
 800397e:	18d4      	adds	r4, r2, r3
 8003980:	18e5      	adds	r5, r4, r3
 8003982:	18ee      	adds	r6, r5, r3
 8003984:	18f7      	adds	r7, r6, r3
 8003986:	eb07 0c03 	add.w	ip, r7, r3
 800398a:	920d      	str	r2, [sp, #52]	; 0x34
 800398c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8003990:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8003994:	910c      	str	r1, [sp, #48]	; 0x30
 8003996:	4419      	add	r1, r3
 8003998:	9103      	str	r1, [sp, #12]
 800399a:	4419      	add	r1, r3
 800399c:	18ca      	adds	r2, r1, r3
 800399e:	9202      	str	r2, [sp, #8]
 80039a0:	441a      	add	r2, r3
 80039a2:	18d0      	adds	r0, r2, r3
 80039a4:	ed92 ea01 	vldr	s28, [r2, #4]
 80039a8:	9a02      	ldr	r2, [sp, #8]
 80039aa:	edd4 7a00 	vldr	s15, [r4]
 80039ae:	edd2 da01 	vldr	s27, [r2, #4]
 80039b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039b4:	ed91 da01 	vldr	s26, [r1, #4]
 80039b8:	ed92 ca01 	vldr	s24, [r2, #4]
 80039bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039be:	9903      	ldr	r1, [sp, #12]
 80039c0:	edcd 7a03 	vstr	s15, [sp, #12]
 80039c4:	edd2 7a00 	vldr	s15, [r2]
 80039c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039ca:	edcd 7a02 	vstr	s15, [sp, #8]
 80039ce:	edd2 7a00 	vldr	s15, [r2]
 80039d2:	edd0 ea01 	vldr	s29, [r0, #4]
 80039d6:	edd1 ca01 	vldr	s25, [r1, #4]
 80039da:	eddc ba00 	vldr	s23, [ip]
 80039de:	edd7 aa00 	vldr	s21, [r7]
 80039e2:	ed96 aa00 	vldr	s20, [r6]
 80039e6:	edd5 9a00 	vldr	s19, [r5]
 80039ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80039ee:	4403      	add	r3, r0
 80039f0:	ed93 fa01 	vldr	s30, [r3, #4]
 80039f4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80039f8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80039fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a04:	46cc      	mov	ip, r9
 8003a06:	e001      	b.n	8003a0c <arm_radix8_butterfly_f32+0x2fc>
 8003a08:	3f3504f3 	.word	0x3f3504f3
 8003a0c:	ed91 6a00 	vldr	s12, [r1]
 8003a10:	ed93 5a00 	vldr	s10, [r3]
 8003a14:	edd0 fa00 	vldr	s31, [r0]
 8003a18:	edd4 7a00 	vldr	s15, [r4]
 8003a1c:	ed95 7a00 	vldr	s14, [r5]
 8003a20:	ed56 3a01 	vldr	s7, [r6, #-4]
 8003a24:	ed17 3a01 	vldr	s6, [r7, #-4]
 8003a28:	ed92 2a00 	vldr	s4, [r2]
 8003a2c:	ed96 0a00 	vldr	s0, [r6]
 8003a30:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003a34:	ee32 1a06 	vadd.f32	s2, s4, s12
 8003a38:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8003a3c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8003a40:	ee78 1a04 	vadd.f32	s3, s16, s8
 8003a44:	ee71 6a24 	vadd.f32	s13, s2, s9
 8003a48:	ee32 2a46 	vsub.f32	s4, s4, s12
 8003a4c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8003a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a54:	ed06 6a01 	vstr	s12, [r6, #-4]
 8003a58:	edd4 8a01 	vldr	s17, [r4, #4]
 8003a5c:	ed92 9a01 	vldr	s18, [r2, #4]
 8003a60:	edd7 0a00 	vldr	s1, [r7]
 8003a64:	edd1 2a01 	vldr	s5, [r1, #4]
 8003a68:	ed95 7a01 	vldr	s14, [r5, #4]
 8003a6c:	ed93 6a01 	vldr	s12, [r3, #4]
 8003a70:	edd0 5a01 	vldr	s11, [r0, #4]
 8003a74:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8003a78:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8003a7c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8003a80:	ee78 fac7 	vsub.f32	s31, s17, s14
 8003a84:	ee38 4a44 	vsub.f32	s8, s16, s8
 8003a88:	ee38 7a87 	vadd.f32	s14, s17, s14
 8003a8c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8003a90:	ee79 2a22 	vadd.f32	s5, s18, s5
 8003a94:	ee32 9a27 	vadd.f32	s18, s4, s15
 8003a98:	ee72 7a67 	vsub.f32	s15, s4, s15
 8003a9c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8003aa0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8003aa4:	ee71 4a64 	vsub.f32	s9, s2, s9
 8003aa8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8003aac:	ee32 1a08 	vadd.f32	s2, s4, s16
 8003ab0:	ee72 fa87 	vadd.f32	s31, s5, s14
 8003ab4:	ee32 2a48 	vsub.f32	s4, s4, s16
 8003ab8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8003abc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8003ac0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003ac4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8003ac8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8003acc:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8003ad0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8003ad4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003ad8:	ee30 6a46 	vsub.f32	s12, s0, s12
 8003adc:	ee74 0a22 	vadd.f32	s1, s8, s5
 8003ae0:	ee36 0a28 	vadd.f32	s0, s12, s17
 8003ae4:	ee74 2a62 	vsub.f32	s5, s8, s5
 8003ae8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8003aec:	ee32 4a64 	vsub.f32	s8, s4, s9
 8003af0:	ee73 8a09 	vadd.f32	s17, s6, s18
 8003af4:	ee74 4a82 	vadd.f32	s9, s9, s4
 8003af8:	ee33 9a49 	vsub.f32	s18, s6, s18
 8003afc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8003b00:	ee35 3a85 	vadd.f32	s6, s11, s10
 8003b04:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8003b08:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8003b0c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8003b10:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8003b14:	ee30 7a68 	vsub.f32	s14, s0, s17
 8003b18:	ee35 8a03 	vadd.f32	s16, s10, s6
 8003b1c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8003b20:	ee73 3a82 	vadd.f32	s7, s7, s4
 8003b24:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8003b28:	ed9d 2a01 	vldr	s4, [sp, #4]
 8003b2c:	eddd 1a02 	vldr	s3, [sp, #8]
 8003b30:	ee35 5a43 	vsub.f32	s10, s10, s6
 8003b34:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8003b38:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8003b3c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8003b40:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003b44:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8003b48:	ee76 5a49 	vsub.f32	s11, s12, s18
 8003b4c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8003b50:	ee39 6a06 	vadd.f32	s12, s18, s12
 8003b54:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8003b58:	ee21 4a84 	vmul.f32	s8, s3, s8
 8003b5c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8003b60:	ee22 7a07 	vmul.f32	s14, s4, s14
 8003b64:	ee22 2a08 	vmul.f32	s4, s4, s16
 8003b68:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8003b6c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8003b70:	ee31 1a09 	vadd.f32	s2, s2, s18
 8003b74:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8003b78:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8003b7c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8003b80:	ee37 7a48 	vsub.f32	s14, s14, s16
 8003b84:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8003b88:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8003b8c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8003b90:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8003b94:	ee38 2a89 	vadd.f32	s4, s17, s18
 8003b98:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8003b9c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8003ba0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8003ba4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8003ba8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8003bac:	eddd 5a03 	vldr	s11, [sp, #12]
 8003bb0:	edc6 fa00 	vstr	s31, [r6]
 8003bb4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8003bb8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8003bbc:	ee30 0a45 	vsub.f32	s0, s0, s10
 8003bc0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8003bc4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8003bc8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8003bcc:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8003bd0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8003bd4:	ee25 6a86 	vmul.f32	s12, s11, s12
 8003bd8:	ee74 4a89 	vadd.f32	s9, s9, s18
 8003bdc:	ee34 3a43 	vsub.f32	s6, s8, s6
 8003be0:	ee78 8a85 	vadd.f32	s17, s17, s10
 8003be4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003be8:	44c4      	add	ip, r8
 8003bea:	45e3      	cmp	fp, ip
 8003bec:	edc3 3a00 	vstr	s7, [r3]
 8003bf0:	edc3 6a01 	vstr	s13, [r3, #4]
 8003bf4:	4456      	add	r6, sl
 8003bf6:	ed07 1a01 	vstr	s2, [r7, #-4]
 8003bfa:	edc7 0a00 	vstr	s1, [r7]
 8003bfe:	4453      	add	r3, sl
 8003c00:	ed80 2a00 	vstr	s4, [r0]
 8003c04:	edc0 2a01 	vstr	s5, [r0, #4]
 8003c08:	4457      	add	r7, sl
 8003c0a:	edc2 1a00 	vstr	s3, [r2]
 8003c0e:	ed82 7a01 	vstr	s14, [r2, #4]
 8003c12:	4450      	add	r0, sl
 8003c14:	ed85 8a00 	vstr	s16, [r5]
 8003c18:	ed85 0a01 	vstr	s0, [r5, #4]
 8003c1c:	4452      	add	r2, sl
 8003c1e:	edc1 4a00 	vstr	s9, [r1]
 8003c22:	4455      	add	r5, sl
 8003c24:	ed81 3a01 	vstr	s6, [r1, #4]
 8003c28:	edc4 8a00 	vstr	s17, [r4]
 8003c2c:	ed84 6a01 	vstr	s12, [r4, #4]
 8003c30:	4451      	add	r1, sl
 8003c32:	4454      	add	r4, sl
 8003c34:	f63f aeea 	bhi.w	8003a0c <arm_radix8_butterfly_f32+0x2fc>
 8003c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c40:	3308      	adds	r3, #8
 8003c42:	930a      	str	r3, [sp, #40]	; 0x28
 8003c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c46:	3308      	adds	r3, #8
 8003c48:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4a:	9b08      	ldr	r3, [sp, #32]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	9308      	str	r3, [sp, #32]
 8003c50:	9b07      	ldr	r3, [sp, #28]
 8003c52:	3308      	adds	r3, #8
 8003c54:	9307      	str	r3, [sp, #28]
 8003c56:	9b06      	ldr	r3, [sp, #24]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	9306      	str	r3, [sp, #24]
 8003c5c:	9b05      	ldr	r3, [sp, #20]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	9305      	str	r3, [sp, #20]
 8003c62:	9b04      	ldr	r3, [sp, #16]
 8003c64:	3308      	adds	r3, #8
 8003c66:	9304      	str	r3, [sp, #16]
 8003c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c6a:	f109 0901 	add.w	r9, r9, #1
 8003c6e:	454b      	cmp	r3, r9
 8003c70:	f47f ae7d 	bne.w	800396e <arm_radix8_butterfly_f32+0x25e>
 8003c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	46d9      	mov	r9, fp
 8003c7c:	9310      	str	r3, [sp, #64]	; 0x40
 8003c7e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8003c82:	e554      	b.n	800372e <arm_radix8_butterfly_f32+0x1e>
 8003c84:	b015      	add	sp, #84	; 0x54
 8003c86:	ecbd 8b10 	vpop	{d8-d15}
 8003c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8e:	bf00      	nop

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000010 	.word	0x20000010

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4d0d      	ldr	r5, [pc, #52]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4d0b      	ldr	r5, [pc, #44]	; (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f000 f8fe 	bl	8003eb0 <_init>
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2600      	movs	r6, #0
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08016ff8 	.word	0x08016ff8
 8003cd8:	08016ff8 	.word	0x08016ff8
 8003cdc:	08016ff8 	.word	0x08016ff8
 8003ce0:	08016ffc 	.word	0x08016ffc

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <sqrt>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	ed2d 8b02 	vpush	{d8}
 8003cfa:	ec55 4b10 	vmov	r4, r5, d0
 8003cfe:	f000 f825 	bl	8003d4c <__ieee754_sqrt>
 8003d02:	4622      	mov	r2, r4
 8003d04:	462b      	mov	r3, r5
 8003d06:	4620      	mov	r0, r4
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eeb0 8a40 	vmov.f32	s16, s0
 8003d0e:	eef0 8a60 	vmov.f32	s17, s1
 8003d12:	f7fc feaf 	bl	8000a74 <__aeabi_dcmpun>
 8003d16:	b990      	cbnz	r0, 8003d3e <sqrt+0x4a>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fe80 	bl	8000a24 <__aeabi_dcmplt>
 8003d24:	b158      	cbz	r0, 8003d3e <sqrt+0x4a>
 8003d26:	f7ff ffb3 	bl	8003c90 <__errno>
 8003d2a:	2321      	movs	r3, #33	; 0x21
 8003d2c:	6003      	str	r3, [r0, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2300      	movs	r3, #0
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7fc fd2d 	bl	8000794 <__aeabi_ddiv>
 8003d3a:	ec41 0b18 	vmov	d8, r0, r1
 8003d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8003d42:	eef0 0a68 	vmov.f32	s1, s17
 8003d46:	ecbd 8b02 	vpop	{d8}
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}

08003d4c <__ieee754_sqrt>:
 8003d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d50:	ec55 4b10 	vmov	r4, r5, d0
 8003d54:	4e55      	ldr	r6, [pc, #340]	; (8003eac <__ieee754_sqrt+0x160>)
 8003d56:	43ae      	bics	r6, r5
 8003d58:	ee10 0a10 	vmov	r0, s0
 8003d5c:	ee10 3a10 	vmov	r3, s0
 8003d60:	462a      	mov	r2, r5
 8003d62:	4629      	mov	r1, r5
 8003d64:	d110      	bne.n	8003d88 <__ieee754_sqrt+0x3c>
 8003d66:	ee10 2a10 	vmov	r2, s0
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	f7fc fbe8 	bl	8000540 <__aeabi_dmul>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4620      	mov	r0, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	f7fc fa2c 	bl	80001d4 <__adddf3>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	460d      	mov	r5, r1
 8003d80:	ec45 4b10 	vmov	d0, r4, r5
 8003d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	dc10      	bgt.n	8003dae <__ieee754_sqrt+0x62>
 8003d8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003d90:	4330      	orrs	r0, r6
 8003d92:	d0f5      	beq.n	8003d80 <__ieee754_sqrt+0x34>
 8003d94:	b15d      	cbz	r5, 8003dae <__ieee754_sqrt+0x62>
 8003d96:	ee10 2a10 	vmov	r2, s0
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	ee10 0a10 	vmov	r0, s0
 8003da0:	f7fc fa16 	bl	80001d0 <__aeabi_dsub>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	f7fc fcf4 	bl	8000794 <__aeabi_ddiv>
 8003dac:	e7e6      	b.n	8003d7c <__ieee754_sqrt+0x30>
 8003dae:	1512      	asrs	r2, r2, #20
 8003db0:	d074      	beq.n	8003e9c <__ieee754_sqrt+0x150>
 8003db2:	07d4      	lsls	r4, r2, #31
 8003db4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003db8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8003dbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003dc0:	bf5e      	ittt	pl
 8003dc2:	0fda      	lsrpl	r2, r3, #31
 8003dc4:	005b      	lslpl	r3, r3, #1
 8003dc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8003dca:	2400      	movs	r4, #0
 8003dcc:	0fda      	lsrs	r2, r3, #31
 8003dce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003dd2:	107f      	asrs	r7, r7, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2516      	movs	r5, #22
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003dde:	1886      	adds	r6, r0, r2
 8003de0:	428e      	cmp	r6, r1
 8003de2:	bfde      	ittt	le
 8003de4:	1b89      	suble	r1, r1, r6
 8003de6:	18b0      	addle	r0, r6, r2
 8003de8:	18a4      	addle	r4, r4, r2
 8003dea:	0049      	lsls	r1, r1, #1
 8003dec:	3d01      	subs	r5, #1
 8003dee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003df2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003df6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003dfa:	d1f0      	bne.n	8003dde <__ieee754_sqrt+0x92>
 8003dfc:	462a      	mov	r2, r5
 8003dfe:	f04f 0e20 	mov.w	lr, #32
 8003e02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003e06:	4281      	cmp	r1, r0
 8003e08:	eb06 0c05 	add.w	ip, r6, r5
 8003e0c:	dc02      	bgt.n	8003e14 <__ieee754_sqrt+0xc8>
 8003e0e:	d113      	bne.n	8003e38 <__ieee754_sqrt+0xec>
 8003e10:	459c      	cmp	ip, r3
 8003e12:	d811      	bhi.n	8003e38 <__ieee754_sqrt+0xec>
 8003e14:	f1bc 0f00 	cmp.w	ip, #0
 8003e18:	eb0c 0506 	add.w	r5, ip, r6
 8003e1c:	da43      	bge.n	8003ea6 <__ieee754_sqrt+0x15a>
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	db41      	blt.n	8003ea6 <__ieee754_sqrt+0x15a>
 8003e22:	f100 0801 	add.w	r8, r0, #1
 8003e26:	1a09      	subs	r1, r1, r0
 8003e28:	459c      	cmp	ip, r3
 8003e2a:	bf88      	it	hi
 8003e2c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8003e30:	eba3 030c 	sub.w	r3, r3, ip
 8003e34:	4432      	add	r2, r6
 8003e36:	4640      	mov	r0, r8
 8003e38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003e3c:	f1be 0e01 	subs.w	lr, lr, #1
 8003e40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8003e44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003e4c:	d1db      	bne.n	8003e06 <__ieee754_sqrt+0xba>
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	d006      	beq.n	8003e60 <__ieee754_sqrt+0x114>
 8003e52:	1c50      	adds	r0, r2, #1
 8003e54:	bf13      	iteet	ne
 8003e56:	3201      	addne	r2, #1
 8003e58:	3401      	addeq	r4, #1
 8003e5a:	4672      	moveq	r2, lr
 8003e5c:	f022 0201 	bicne.w	r2, r2, #1
 8003e60:	1063      	asrs	r3, r4, #1
 8003e62:	0852      	lsrs	r2, r2, #1
 8003e64:	07e1      	lsls	r1, r4, #31
 8003e66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003e6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003e6e:	bf48      	it	mi
 8003e70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003e74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003e78:	4614      	mov	r4, r2
 8003e7a:	e781      	b.n	8003d80 <__ieee754_sqrt+0x34>
 8003e7c:	0ad9      	lsrs	r1, r3, #11
 8003e7e:	3815      	subs	r0, #21
 8003e80:	055b      	lsls	r3, r3, #21
 8003e82:	2900      	cmp	r1, #0
 8003e84:	d0fa      	beq.n	8003e7c <__ieee754_sqrt+0x130>
 8003e86:	02cd      	lsls	r5, r1, #11
 8003e88:	d50a      	bpl.n	8003ea0 <__ieee754_sqrt+0x154>
 8003e8a:	f1c2 0420 	rsb	r4, r2, #32
 8003e8e:	fa23 f404 	lsr.w	r4, r3, r4
 8003e92:	1e55      	subs	r5, r2, #1
 8003e94:	4093      	lsls	r3, r2
 8003e96:	4321      	orrs	r1, r4
 8003e98:	1b42      	subs	r2, r0, r5
 8003e9a:	e78a      	b.n	8003db2 <__ieee754_sqrt+0x66>
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	e7f0      	b.n	8003e82 <__ieee754_sqrt+0x136>
 8003ea0:	0049      	lsls	r1, r1, #1
 8003ea2:	3201      	adds	r2, #1
 8003ea4:	e7ef      	b.n	8003e86 <__ieee754_sqrt+0x13a>
 8003ea6:	4680      	mov	r8, r0
 8003ea8:	e7bd      	b.n	8003e26 <__ieee754_sqrt+0xda>
 8003eaa:	bf00      	nop
 8003eac:	7ff00000 	.word	0x7ff00000

08003eb0 <_init>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	bf00      	nop
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr

08003ebc <_fini>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr
